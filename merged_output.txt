===== ./config/db.js =====
require('dotenv').config();
const mysql = require('mysql2/promise');

const pool = mysql.createPool({
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  database: process.env.DB_NAME,
  password: process.env.DB_PASSWORD,
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0
});

module.exports = pool;


===== ./config/uploadConfig.js =====
const multer = require('multer');
const path = require('path');
const fs = require('fs');
const db = require('../config/db');

const storage = multer.diskStorage({
  destination: async (req, file, cb) => {
    let uploadDir;
    try {
      if (file.fieldname.startsWith('profileImage')) {
        uploadDir = path.join(__dirname, '../uploads/private/profile_images');
      } else {
        const propositionId = req.params.propositionId;
        const type = file.fieldname.includes('before') ? 'before' : 'after';

        const existingCount = await getExistingImageCount(propositionId, type);
        const currentUploads = req.files?.[file.fieldname]?.length || 0;
        const maxAllowed = 3;

        if (existingCount + currentUploads >= maxAllowed) {
          return cb(new Error(`Vous ne pouvez pas télécharger plus de ${maxAllowed} images pour "${type}".`));
        }

        uploadDir = path.join(__dirname, '../uploads/private/propositions', `proposition_${propositionId}`, type);
      }

      if (!fs.existsSync(uploadDir)) {
        fs.mkdirSync(uploadDir, { recursive: true });
      }

      cb(null, uploadDir);
    } catch (error) {
      console.error('Erreur lors de la détermination du répertoire de téléchargement:', error);
      cb(new Error('Erreur lors de la détermination du répertoire de téléchargement.'));
    }
  },
  filename: (req, file, cb) => {
    if (file.fieldname.startsWith('profileImage')) {
      const userId = req.params.userId;
      cb(null, `profileimg-${userId}${path.extname(file.originalname)}`);
    } else {
      const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
      cb(null, `${file.fieldname}-${uniqueSuffix}${path.extname(file.originalname)}`);
    }
  }
});

const fileFilter = (req, file, cb) => {
  if (file.mimetype.startsWith('image/')) {
    cb(null, true);
  } else {
    cb(new Error('Type de fichier invalide. Seules les images sont autorisées.'));
  }
};

const limits = {
  fileSize: 1024 * 1024 * 5
};

const upload = multer({
  storage: storage,
  fileFilter: fileFilter,
  limits: limits
});

module.exports = upload;

async function getExistingImageCount(propositionId, type) {
  const [existingImages] = await db.query(
    'SELECT COUNT(*) AS count FROM images WHERE proposition_id = ? AND type = ?',
    [propositionId, type]
  );
  return existingImages[0].count;
}


===== ./config/winston.js =====
const { createLogger, format, transports } = require('winston');
const { combine, timestamp, printf, errors } = format;

const customFormat = printf(({ level, message, timestamp, stack }) => {
    return `${timestamp} ${level}: ${stack || message}`;
});

const logger = createLogger({
    level: 'info',
    format: combine(
        timestamp(),
        errors({ stack: true }),
        customFormat
    ),
    transports: [
        new transports.Console({
            format: combine(
                format.colorize(),
                customFormat
            ),
            level: process.env.NODE_ENV === 'production' ? 'info' : 'debug',
        }),

        new transports.File({
            filename: 'logs/error.log',
            level: 'error',
        }),
        new transports.File({
            filename: 'logs/app.log',
            level: 'info',
        })
    ]
});

logger.stream = {
    write: (message) => {
        logger.info(message.trim());
    },
};

module.exports = logger;


===== ./index.js =====
require('dotenv').config();
const express = require('express');
const session = require('express-session');
const flash = require('connect-flash');
const bodyParser = require('body-parser');
const path = require('path');
const MySQLStore = require('express-mysql-session')(session);
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
const compression = require('compression');
const morgan = require('morgan');
const logger = require('./config/winston.js');
const db = require('./config/db');

const app = express();
const port = 80;

// Session Store Configuration
const dbOptions = {
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  database: process.env.DB_NAME,
  password: process.env.DB_PASSWORD,
  checkExpirationInterval: 5 * 60 * 1000,
  expiration: 3 * 60 * 60 * 1000
};

const sessionStore = new MySQLStore(dbOptions);

// Middleware
app.disable('x-powered-by');
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));

// Security and Rate Limiting
const limiter = rateLimit({ windowMs: 1 * 60 * 1000, max: 500 });
// app.use(helmet());
app.use(limiter);

app.use(compression());
// app.use(morgan('combined', { stream: logger.stream }));

app.use(express.urlencoded({ extended: true }));
app.use(express.json());

app.use(
  session({
    secret: process.env.SESSION_SECRET,
    resave: false, 
    saveUninitialized: false,
    store: sessionStore,
    cookie: {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      maxAge: 5 * 60 * 60 * 1000
    }
  })
);

app.use(flash());
app.use((req, res, next) => {
  res.locals.success_msg = req.flash('success_msg');
  res.locals.error_msg = req.flash('error_msg');
  res.locals.error = req.flash('error');
  next();
});

// Static Files
app.use(express.static(path.join(__dirname, 'public')));

// Routes
const chartRoutes = require('./routes/charts');
const propositionRoutes = require('./routes/propositions');
const votingSessionRoutes = require('./routes/votes');
const imageRoutes = require('./routes/images');
const userRoutes = require('./routes/users');
const fonctionsRoutes = require('./routes/functions');
const { router: authRoutes, isAuthenticated } = require('./routes/auth');
const isJury = require('./middleware/checkUserJury');
const isAdmin = require('./middleware/checkUserAdmin');

app.use('/charts', isAuthenticated, isAdmin, chartRoutes);
app.use('/propositions', isAuthenticated, propositionRoutes);
app.use('/voting-sessions', isAuthenticated, votingSessionRoutes);
app.use('/images', isAuthenticated, imageRoutes);
app.use('/users', isAuthenticated, isAdmin, userRoutes);
app.use('/functions', isAuthenticated, isAdmin, fonctionsRoutes);
app.use('/auth', authRoutes);
app.use('/', authRoutes);

app.use((err, req, res, next) => {
  logger.error(err.stack);
  res.status(500).send('Something went wrong!');
});

app.listen(port, () => {
  console.log(`Server running on http://localhost:${port}`);
});


===== ./middleware/checkUserAdmin.js =====
function isAdmin(req, res, next) {
    if (req.session.isAdmin) {
        next();
    } else {
        res.redirect('/'); 
    }
}

module.exports = isAdmin;


===== ./middleware/checkUserJury.js =====
function isJury(req, res, next) {
    if (req.session.isJury) {
        next();
    } else {
        res.redirect('/');
    }
}
module.exports = isJury;


===== ./middleware/checkUserNormal.js =====
function isNormalUser(req, res, next) {
    if (req.session && req.session.user && req.session.user.is_user) {
        next();
    } else {
        res.redirect('/');
    }
}
module.exports = isNormalUser;


===== ./middleware/checkUserOwnership.js =====
const db = require('../config/db');

async function checkUserOwnership(req, res, next) {
  const propositionId = req.params.propositionId;
  const userId = req.session.userId;

  try {
    const [result] = await db.query(
      'SELECT user_id FROM propositions WHERE id = ?',
      [propositionId]
    );
    
    if (result.length > 0 && result[0].user_id === userId) {
      next();
    } else {
      res.status(403).json({ success: false, message: 'Forbidden: You do not own this proposition.' });
    }
  } catch (error) {
    console.error(error);
    res.status(500).json({ success: false, message: error.message });
  }
}
module.exports = checkUserOwnership;


===== ./public/js/compressor.js =====
/*!
 * Compressor.js v1.1.1
 * https://fengyuanchen.github.io/compressorjs
 *
 * Copyright 2018-present Chen Fengyuan
 * Released under the MIT license
 *
 * Date: 2021-10-05T02:32:40.212Z
 */
!function (e, t) { "object" == typeof exports && "undefined" != typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define(t) : (e = "undefined" != typeof globalThis ? globalThis : e || self).Compressor = t() }(this, function () { "use strict"; function t(t, e) { var r, i = Object.keys(t); return Object.getOwnPropertySymbols && (r = Object.getOwnPropertySymbols(t), e && (r = r.filter(function (e) { return Object.getOwnPropertyDescriptor(t, e).enumerable })), i.push.apply(i, r)), i } function a(i) { for (var e = 1; e < arguments.length; e++) { var a = null != arguments[e] ? arguments[e] : {}; e % 2 ? t(Object(a), !0).forEach(function (e) { var t, r; t = i, e = a[r = e], r in t ? Object.defineProperty(t, r, { value: e, enumerable: !0, configurable: !0, writable: !0 }) : t[r] = e }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(i, Object.getOwnPropertyDescriptors(a)) : t(Object(a)).forEach(function (e) { Object.defineProperty(i, e, Object.getOwnPropertyDescriptor(a, e)) }) } return i } function n(e, t) { for (var r = 0; r < t.length; r++) { var i = t[r]; i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i) } } function s() { return (s = Object.assign || function (e) { for (var t = 1; t < arguments.length; t++) { var r, i = arguments[t]; for (r in i) Object.prototype.hasOwnProperty.call(i, r) && (e[r] = i[r]) } return e }).apply(this, arguments) } var e, r, o, l, c, h, u, f, i = { exports: {} }; e = i, "undefined" != typeof window && (o = (r = window).HTMLCanvasElement && r.HTMLCanvasElement.prototype, l = r.Blob && function () { try { return Boolean(new Blob) } catch (e) { return !1 } }(), c = l && r.Uint8Array && function () { try { return 100 === new Blob([new Uint8Array(100)]).size } catch (e) { return !1 } }(), h = r.BlobBuilder || r.WebKitBlobBuilder || r.MozBlobBuilder || r.MSBlobBuilder, u = /^data:((.*?)(;charset=.*?)?)(;base64)?,/, f = (l || h) && r.atob && r.ArrayBuffer && r.Uint8Array && function (e) { var t, r, i, a, n, o = e.match(u); if (!o) throw new Error("invalid data URI"); for (t = o[2] ? o[1] : "text/plain" + (o[3] || ";charset=US-ASCII"), i = !!o[4], o = e.slice(o[0].length), r = (i ? atob : decodeURIComponent)(o), i = new ArrayBuffer(r.length), a = new Uint8Array(i), n = 0; n < r.length; n += 1)a[n] = r.charCodeAt(n); return l ? new Blob([c ? a : i], { type: t }) : ((o = new h).append(i), o.getBlob(t)) }, r.HTMLCanvasElement && !o.toBlob && (o.mozGetAsFile ? o.toBlob = function (e, t, r) { var i = this; setTimeout(function () { r && o.toDataURL && f ? e(f(i.toDataURL(t, r))) : e(i.mozGetAsFile("blob", t)) }) } : o.toDataURL && f && (o.msToBlob ? o.toBlob = function (e, t, r) { var i = this; setTimeout(function () { (t && "image/png" !== t || r) && o.toDataURL && f ? e(f(i.toDataURL(t, r))) : e(i.msToBlob(t)) }) } : o.toBlob = function (e, t, r) { var i = this; setTimeout(function () { e(f(i.toDataURL(t, r))) }) })), e.exports ? e.exports = f : r.dataURLtoBlob = f); function j(e) { return 0 < e && e < 1 / 0 } var T = i.exports, d = { strict: !0, checkOrientation: !0, maxWidth: 1 / 0, maxHeight: 1 / 0, minWidth: 0, minHeight: 0, width: void 0, height: void 0, resize: "none", quality: .8, mimeType: "auto", convertTypes: ["image/png"], convertSize: 5e6, beforeDraw: null, drew: null, success: null, error: null }, m = "undefined" != typeof window && void 0 !== window.document ? window : {}, p = Array.prototype.slice; var b = /^image\/.+$/; function R(e) { return b.test(e) } var g = String.fromCharCode; var y = m.btoa; function w(e, t) { for (var r, i = [], a = new Uint8Array(e); 0 < a.length;)i.push(g.apply(null, (r = a.subarray(0, 8192), Array.from ? Array.from(r) : p.call(r)))), a = a.subarray(8192); return "data:".concat(t, ";base64,").concat(y(i.join(""))) } function v(e) { var t, r, i, a, n, o, s, l = new DataView(e); try { if (255 === l.getUint8(0) && 216 === l.getUint8(1)) for (var c = l.byteLength, h = 2; h + 1 < c;) { if (255 === l.getUint8(h) && 225 === l.getUint8(h + 1)) { r = h; break } h += 1 } if (r && (a = r + 10, "Exif" === function (e, t, r) { var i, a = ""; for (r += t, i = t; i < r; i += 1)a += g(e.getUint8(i)); return a }(l, r + 4, 4) && (!(s = 18761 === (n = l.getUint16(a))) && 19789 !== n || 42 !== l.getUint16(a + 2, s) || 8 <= (o = l.getUint32(a + 4, s)) && (i = a + o))), i) for (var u, f = l.getUint16(i, s), d = 0; d < f; d += 1)if (u = i + 12 * d + 2, 274 === l.getUint16(u, s)) { u += 8, t = l.getUint16(u, s), l.setUint16(u, 1, s); break } } catch (e) { t = 1 } return t } var U = /\.\d*(?:0|9){12}\d*$/; function k(e, t) { t = 1 < arguments.length && void 0 !== t ? t : 1e11; return U.test(e) ? Math.round(e * t) / t : e } function x(e, t) { var r = e.aspectRatio, i = e.height, a = e.width, n = 1 < arguments.length && void 0 !== t ? t : "none", o = j(a), e = j(i); return o && e ? (t = i * r, ("contain" === n || "none" === n) && a < t || "cover" === n && t < a ? i = a / r : a = i * r) : o ? i = a / r : e && (a = i * r), { width: a, height: i } } var O = m.ArrayBuffer, B = m.FileReader, A = m.URL || m.webkitURL, M = /\.\w+$/, D = m.Compressor; return function () { function r(e, t) { !function (e, t) { if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function") }(this, r), this.file = e, this.image = new Image, this.options = a(a({}, d), t), this.aborted = !1, this.result = null, this.init() } var e, t, i; return e = r, i = [{ key: "noConflict", value: function () { return window.Compressor = D, r } }, { key: "setDefaults", value: function (e) { s(d, e) } }], (t = [{ key: "init", value: function () { var i, e, a, n = this, o = this.file, t = this.options; e = o, "undefined" != typeof Blob && (e instanceof Blob || "[object Blob]" === Object.prototype.toString.call(e)) ? R(i = o.type) ? A && B ? (O || (t.checkOrientation = !1), A && !t.checkOrientation ? this.load({ url: A.createObjectURL(o) }) : (e = new B, a = t.checkOrientation && "image/jpeg" === i, (this.reader = e).onload = function (e) { var t = e.target.result, r = {}; a ? 1 < (e = v(t)) || !A ? (r.url = w(t, i), 1 < e && s(r, function (e) { var t = 0, r = 1, i = 1; switch (e) { case 2: r = -1; break; case 3: t = -180; break; case 4: i = -1; break; case 5: t = 90, i = -1; break; case 6: t = 90; break; case 7: t = 90, r = -1; break; case 8: t = -90 }return { rotate: t, scaleX: r, scaleY: i } }(e))) : r.url = A.createObjectURL(o) : r.url = t, n.load(r) }, e.onabort = function () { n.fail(new Error("Aborted to read the image with FileReader.")) }, e.onerror = function () { n.fail(new Error("Failed to read the image with FileReader.")) }, e.onloadend = function () { n.reader = null }, a ? e.readAsArrayBuffer(o) : e.readAsDataURL(o))) : this.fail(new Error("The current browser does not support image compression.")) : this.fail(new Error("The first argument must be an image File or Blob object.")) : this.fail(new Error("The first argument must be a File or Blob object.")) } }, { key: "load", value: function (e) { var t = this, r = this.file, i = this.image; i.onload = function () { t.draw(a(a({}, e), {}, { naturalWidth: i.naturalWidth, naturalHeight: i.naturalHeight })) }, i.onabort = function () { t.fail(new Error("Aborted to load the image.")) }, i.onerror = function () { t.fail(new Error("Failed to load the image.")) }, m.navigator && /(?:iPad|iPhone|iPod).*?AppleWebKit/i.test(m.navigator.userAgent) && (i.crossOrigin = "anonymous"), i.alt = r.name, i.src = e.url } }, { key: "draw", value: function (e) { var t = this, r = e.naturalWidth, i = e.naturalHeight, a = e.rotate, n = void 0 === a ? 0 : a, o = e.scaleX, s = void 0 === o ? 1 : o, l = e.scaleY, c = void 0 === l ? 1 : l, h = this.file, u = this.image, f = this.options, d = document.createElement("canvas"), m = d.getContext("2d"), p = Math.abs(n) % 180 == 90, b = ("contain" === f.resize || "cover" === f.resize) && j(f.width) && j(f.height), g = Math.max(f.maxWidth, 0) || 1 / 0, y = Math.max(f.maxHeight, 0) || 1 / 0, w = Math.max(f.minWidth, 0) || 0, a = Math.max(f.minHeight, 0) || 0, o = r / i, e = f.width, l = f.height; p && (g = (v = [y, g])[0], y = v[1], w = (v = [a, w])[0], a = v[1], e = (v = [l, e])[0], l = v[1]); var v = x({ aspectRatio: o = b ? e / l : o, width: g, height: y }, "contain"); g = v.width, y = v.height; v = x({ aspectRatio: o, width: w, height: a }, "cover"); w = v.width, a = v.height, l = b ? (e = (v = x({ aspectRatio: o, width: e, height: l }, f.resize)).width, v.height) : (e = void 0 === (O = (U = x({ aspectRatio: o, width: e, height: l })).width) ? r : O, void 0 === (O = U.height) ? i : O); var U = -(e = Math.floor(k(Math.min(Math.max(e, w), g)))) / 2, O = -(l = Math.floor(k(Math.min(Math.max(l, a), y)))) / 2, w = e, g = l, a = []; b && (y = (o = x({ aspectRatio: o, width: y = r, height: b = i }, { contain: "cover", cover: "contain" }[f.resize])).width, b = o.height, a.push((r - y) / 2, (i - b) / 2, y, b)), a.push(U, O, w, g), p && (e = (B = [l, e])[0], l = B[1]), d.width = e, d.height = l, R(f.mimeType) || (f.mimeType = h.type); var B = "transparent"; h.size > f.convertSize && 0 <= f.convertTypes.indexOf(f.mimeType) && (f.mimeType = "image/jpeg"), "image/jpeg" === f.mimeType && (B = "#fff"), m.fillStyle = B, m.fillRect(0, 0, e, l), f.beforeDraw && f.beforeDraw.call(this, m, d), this.aborted || (m.save(), m.translate(e / 2, l / 2), m.rotate(n * Math.PI / 180), m.scale(s, c), m.drawImage.apply(m, [u].concat(a)), m.restore(), f.drew && f.drew.call(this, m, d), this.aborted || (m = function (e) { t.aborted || t.done({ naturalWidth: r, naturalHeight: i, result: e }) }, d.toBlob ? d.toBlob(m, f.mimeType, f.quality) : m(T(d.toDataURL(f.mimeType, f.quality))))) } }, { key: "done", value: function (e) { var t = e.naturalWidth, r = e.naturalHeight, i = e.result, a = this.file, n = this.image, e = this.options; A && !e.checkOrientation && A.revokeObjectURL(n.src), !i || e.strict && i.size > a.size && e.mimeType === a.type && !(e.width > t || e.height > r || e.minWidth > t || e.minHeight > r || e.maxWidth < t || e.maxHeight < r) ? i = a : (r = new Date, i.lastModified = r.getTime(), i.lastModifiedDate = r, i.name = a.name, i.name && i.type !== a.type && (i.name = i.name.replace(M, (a = R(a = i.type) ? a.substr(6) : "", ".".concat(a = "jpeg" === a ? "jpg" : a))))), this.result = i, e.success && e.success.call(this, i) } }, { key: "fail", value: function (e) { var t = this.options; if (!t.error) throw e; t.error.call(this, e) } }, { key: "abort", value: function () { this.aborted || (this.aborted = !0, this.reader ? this.reader.abort() : this.image.complete ? this.fail(new Error("The compression process has been aborted.")) : (this.image.onload = null, this.image.onabort())) } }]) && n(e.prototype, t), i && n(e, i), r }() });

===== ./public/js/cumul.js =====
let chart = null;

function renderChart() {
    if (chart) {
        chart.destroy();
    }

    const ctx = document.getElementById('cumulChart').getContext('2d');
    const startMonth = document.getElementById('start-month').value;
    const endMonth = document.getElementById('end-month').value;

    if (startMonth > endMonth) {
        alert('Start month cannot be later than end month');
        return;
    }

    fetch(`/charts/cumul-data?startMonth=${startMonth}&endMonth=${endMonth}`)
        .then(response => response.json())
        .then(data => {
            const formattedData = formatChartData(data);

            chart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: formattedData.labels,
                    datasets: [
                        {
                            label: 'Cumul des Idées Émises',
                            data: formattedData.data,
                            borderColor: 'rgba(75, 192, 192, 1)',
                            backgroundColor: 'rgba(75, 192, 192, 0.2)',
                            borderWidth: 1,
                            fill: true,
                            type: 'bar',
                        },
                        {
                            label: 'Prévision Cumulative',
                            data: formattedData.prediction,
                            borderColor: 'rgba(255, 99, 132, 1)',
                            backgroundColor: 'rgba(255, 99, 132, 0.2)',
                            fill: false,
                            type: 'line',
                            tension: 0.1,
                            borderWidth: 2
                        }
                    ]
                },
                options: {
                    responsive: true,
                    scales: {
                        x: {
                            type: 'category',
                            labels: formattedData.labels,
                            title: {
                                display: true,
                                text: 'Mois',
                                font: {
                                    size: 14
                                }
                            }
                        },
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'Cumul des Propositions',
                                font: {
                                    size: 14
                                }
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            position: 'top',
                            labels: {
                                font: {
                                    size: 14
                                }
                            }
                        },
                        tooltip: {
                            callbacks: {
                                label: function (tooltipItem) {
                                    return tooltipItem.raw.toFixed(0) + " propositions";
                                }
                            }
                        }
                    }
                }
            });
        })
        .catch(error => console.error('Error fetching data:', error));
}

function exponentialSmoothing(data, alpha = 0.2) {
    let smoothedData = [data[0]];

    for (let i = 1; i < data.length; i++) {
        smoothedData.push(alpha * data[i] + (1 - alpha) * smoothedData[i - 1]);
    }

    return smoothedData;
}

function formatChartData(data) {
    const labels = [];
    const chartData = [];
    const predictionData = [];

    let cumulative = 0;
    data.forEach(item => {
        const monthYear = new Date(item.year, item.month - 1).toLocaleString('default', { month: 'short', year: 'numeric' });
        labels.push(monthYear);
        cumulative += item.cumul_idee_emises;
        chartData.push(cumulative);
    });

    const smoothedData = exponentialSmoothing(chartData);

    const futureStartMonth = data[data.length - 1]?.month || new Date().getMonth() + 1;
    const futureStartYear = data[data.length - 1]?.year || new Date().getFullYear();
    let predictedCumulative = smoothedData[smoothedData.length - 1];

    for (let i = 0; i < 10; i++) {
        predictedCumulative += smoothedData[smoothedData.length - 1] * 0.05;
        const nextMonth = new Date(futureStartYear, futureStartMonth + i, 1);
        const monthYear = nextMonth.toLocaleString('default', { month: 'short', year: 'numeric' });
        labels.push(monthYear);
        predictionData.push(predictedCumulative);
    }

    return {
        labels: labels,
        data: smoothedData,
        prediction: predictionData
    };
}

document.getElementById('filter-form').addEventListener('submit', function (event) {
    event.preventDefault();
    renderChart();
});


===== ./public/js/detailProposition.js =====
function confirmDelete(propositionId) {
    Swal.fire({
        title: "Êtes-vous sûr de vouloir supprimer cette proposition ?",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Oui',
        cancelButtonText: 'Non'
    }).then((result) => {
        if (result.isConfirmed) {
            fetch(`/propositions/${propositionId}/delete`, {
                method: 'DELETE'
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        window.history.back();
                    } else {
                        Swal.fire("Erreur", data.message, "error");
                    }
                });
        }
    });
}

function openModal(imageSrc) {
    const modal = document.getElementById('imageModal');
    const modalImg = document.getElementById('modalImage');
    const downloadLink = document.getElementById('downloadLink');

    modal.style.display = 'flex';
    modalImg.src = imageSrc;
    downloadLink.href = imageSrc;
}

window.onclick = function (event) {
    const modal = document.getElementById('imageModal');
    if (event.target === modal) {
        closeModal();
    }
};

function closeModal() {
    const modal = document.getElementById('imageModal');
    modal.style.display = 'none';
}

const url = window.location.pathname;
const segments = url.split('/');
const id = segments[segments.length - 1];
Dropzone.options.beforeDropzone = {
    paramName: "beforeImages",
    acceptedFiles: "image/*",
    thumbnailWidth: 250,
    thumbnailHeight: 250,
    dictCancelUpload: 'Annuler',
    addRemoveLinks: true,
    autoProcessQueue: false,
    clickable: "#add1",
    dictDefaultMessage: '',
    dictRemoveFile: '<i class="fas fa-trash-alt"></i>',
    init: function () {
        let myDropzone = this;
        let isUploading = false;

        this.on("error", function (file, response) {
            const deleteButton = file.previewElement.querySelector(".dz-remove");
            if (deleteButton) {
                deleteButton.style.display = "none";
            }
            console.error('Upload error:', response);
        });

        this.on("success", function (file, response) {
            file.id = response.uploadedFiles[0].fileId;
            file.size = response.uploadedFiles[0].size;
            refreshGallery('before');
            isUploading = false; // Mark upload as finished
            processNextFile(); // Start the next file upload
        });

        this.on("sending", function (file, xhr, formData) {
            if (!file.compressed) {
                xhr.abort();
                console.log('File not compressed. Aborting upload.');
            } else {
                isUploading = true; // Mark upload as in progress
            }
        });

        this.on("removedfile", function (file) {
            if (file.id && file.compressed) {
                fetch(`/images/delete/${file.id}`, {
                    method: 'DELETE'
                })
                    .then(response => response.json())
                    .then(result => {
                        if (!result.success) {
                            let mockFile = {
                                name: file.name,
                                size: file.size,
                                id: file.id
                            };
                            this.displayExistingFile(mockFile, `/images/${id}/before/${file.name}`);
                            mockFile.previewElement.classList.add("dz-complete");
                        } else {
                            refreshGallery('before');
                        }
                    }).catch(error => {
                        console.error('Error removing file:', error);
                    });
            }
        });

        this.on("addedfile", function (file) {
            if (file.compressed) {
                processNextFile();
                return;
            }
            if (file.size < 200) {
                file.compressed = true;
                processNextFile();
                return;
            }
            const compressionRatio = 0.9;

            new Compressor(file, {
                quality: compressionRatio,
                maxWidth: 800,
                maxHeight: 600,
                success: function (result) {
                    myDropzone.removeFile(file);
                    result.compressed = true;
                    myDropzone.addFile(result);
                    processNextFile(); // Start the upload after compression
                },
                error: function (err) {
                    console.error('Error compressing image:', err);
                }
            });
        });

        function processNextFile() {
            if (!isUploading && myDropzone.getQueuedFiles().length > 0) {
                const nextFile = myDropzone.getQueuedFiles()[0];
                if (nextFile.compressed) { // Only process if compressed
                    myDropzone.processFile(nextFile); // Process the file
                } else {
                    console.log('Next file is not compressed, skipping upload.');
                }
            } else {
                console.log('No files in queue or already uploading.');
            }
        }

        this.on("queuecomplete", function () {
            console.log('All files have been processed.');
        });

        fetch(`/images/proposition/${id}?type=before`)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    data.images.forEach(file => {
                        let mockFile = {
                            name: file.filename,
                            size: file.file_size,
                            id: file.id,
                            compressed: true
                        };
                        this.displayExistingFile(mockFile, `/images/${id}/before/${file.filename}`);
                        mockFile.previewElement.classList.add("dz-complete");
                        const removeButton = mockFile.previewElement.querySelector(".dz-remove");
                        removeButton.innerHTML = '<i class="fas fa-trash-alt"></i>';
                    });
                }
            });
    }
};

Dropzone.options.afterDropzone = {
    paramName: "afterImages",
    acceptedFiles: "image/*",
    thumbnailWidth: "250",
    thumbnailHeight: "250",
    dictCancelUpload: 'Annuler',
    addRemoveLinks: true,
    clickable: "#add2",
    dictDefaultMessage: '',
    dictRemoveFile: '<i class="fas fa-trash-alt"></i>',
    autoProcessQueue: false,
    init: function () {
        let myDropzone = this;
        this.on("error", function (file, response) {
            var deleteButton = file.previewElement.querySelector(".dz-remove");
            if (deleteButton) {
                deleteButton.style.display = "none";
            }

            var errorMark = file.previewElement;
            if (errorMark) {
                errorMark.addEventListener("click", function () {
                    deleteButton.click();
                });
            }
        })

        this.on("success", function (file, response) {
            file.id = response.uploadedFiles[0].fileId;
            file.size = response.uploadedFiles[0].size;
            refreshGallery('after');
        });

        this.on("removedfile", function (file) {
            if (file.id) {
                fetch(`/images/delete/${file.id}`, {
                    method: 'DELETE'
                })
                    .then(response => response.json())
                    .then(result => {
                        if (!result.success) {
                            let mockFile = {
                                name: file.name,
                                size: file.size,
                                id: file.id
                            };
                            this.displayExistingFile(mockFile, `/images/${id}/after/${file.name}`);
                            mockFile.previewElement.classList.add("dz-complete");
                        } else {
                            refreshGallery('after');
                        }
                    }).catch(error => {
                        let mockFile = {
                            name: file.name,
                            size: file.size,
                            id: file.id
                        };
                        this.displayExistingFile(mockFile, `/images/${id}/after/${file.name}`);
                        mockFile.previewElement.classList.add("dz-complete");
                    });
            }
        });

        this.on("addedfile", function (file) {
            if (file.compressed) {
                return;
            }
            if (file.size < 200) {
                file.compressed = true;
                return;
            }

            myDropzone.removeFile(file);

            const compressionRatio = 0.9;

            new Compressor(file, {
                quality: compressionRatio,
                maxWidth: 800,
                maxHeight: 600,
                success: function (result) {
                    result.compressed = true;
                    myDropzone.addFile(result);
                    myDropzone.uploadFile(result);

                },
                error: function (err) {
                    console.error('Error compressing image:', err);
                }
            });
        });

        fetch(`/images/proposition/${id}?type=after`)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    data.images.forEach(file => {
                        let mockFile = {
                            name: file.filename,
                            size: file.file_size,
                            id: file.id,
                            compressed: true
                        };
                        this.displayExistingFile(mockFile, `/images/${id}/after/${file.filename}`);
                        mockFile.previewElement.classList.add("dz-complete");
                        const removeButton = mockFile.previewElement.querySelector(".dz-remove");
                        removeButton.innerHTML = '<i class="fas fa-trash-alt"></i>';
                    });
                }
            })
    }
};

function openForm(type) {
    document.body.classList.add('popup-active'); // Disable body scrolling

    if (type === 'before') {
        document.getElementById('popupFormBefore').style.display = 'flex';
    } else if (type === 'after') {
        document.getElementById('popupFormAfter').style.display = 'flex';
    }
}

function closeForm(type) {
    document.body.classList.remove('popup-active'); // Re-enable body scrolling

    if (type === 'before') {
        document.getElementById('popupFormBefore').style.display = 'none';
    } else if (type === 'after') {
        document.getElementById('popupFormAfter').style.display = 'none';
    }
}

const forms = document.querySelectorAll('.dropzone');
let observing = true;

function updateImages() {
    if (!observing) return;
    observing = false;
    forms.forEach(form => {
        const childCount = form.children.length - 1;
        const image = form.querySelector('.add-wrapper');
        if (childCount < 4) {
            form.appendChild(image);
            image.style.display = 'flex';
        } else {
            image.style.display = 'none';
        }
    });

    setTimeout(() => {
        observing = true;
    }, 0)
}

forms.forEach(form => {
    const observer = new MutationObserver(updateImages);
    observer.observe(form, {
        childList: true
    });
});

function refreshGallery(type) {
    fetch(`/images/proposition/${id}?type=${type}`)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const galleryContainer = document.querySelector(`.image-gallery[data-type="${type}"]`);
                if (data.images.length > 0) {
                    galleryContainer.innerHTML = data.images.map(image => `
    <div class="image-wrapper" onclick="openModal('/images/${id}/${type}/${image.filename}')">
      <img src="/images/${id}/${type}/${image.filename}" alt="Image ${type === 'before' ? 'Avant' : 'Après'}" class="image-thumbnail">
    </div>
    `).join('');
                } else {
                    galleryContainer.innerHTML = `<p class="no-images-message">Aucune image "${type === 'before' ? 'Avant' : 'Après'}" disponible.</p>`;
                }
            } else {
                console.error('Error fetching images:', data.message);
            }
        })
        .catch(error => {
            console.error('Error updating image gallery:', error);
        });
}

document.addEventListener('DOMContentLoaded', () => {
    refreshGallery('before');
    refreshGallery('after');
    const hash = window.location.hash;

    if (hash === '#before-gallery') {
        const beforeGallery = document.querySelector('.proposition-images .image-gallery[data-type="before"]');
        if (beforeGallery) {
            beforeGallery.scrollIntoView({
                behavior: 'smooth'
            });
        }
        history.replaceState(null, '', window.location.pathname);

        openForm('before');
    }
    setTimeout(() => {
        updateImages();
    }, 2000)
});

===== ./public/js/editUser.js =====
Dropzone.options.profileImageDropzone = {
    paramName: "profileImage",
    acceptedFiles: "image/*",
    thumbnailWidth: 100,
    thumbnailHeight: 100,
    autoProcessQueue: false,
    addRemoveLinks: true,
    dictCancelUpload: 'Annuler',
    clickable: "#add",
    maxFiles: 1,
    dictDefaultMessage: '',
    dictRemoveFile: '<i class="fas fa-trash-alt"></i>',
    init: function () {
        let myDropzone = this;
        const formAction = document.querySelector('#profileImageDropzone').action;
        const userId = formAction.split('/').pop();
        const existingImageUrl = `/images/profile-image/${userId}?p=1`;

        fetch(existingImageUrl)
            .then(response => {
                if (response.ok) {
                    return response.blob();
                }
                if (response.status === 404) {
                    return null;
                }
                throw new Error('Erreur lors de la récupération de l\'image.');
            })
            .then(blob => {
                if (blob) {
                    const mockFile = { name: `profileimg-${userId}`, size: blob.size, compressed: true };
                    const imgUrl = URL.createObjectURL(blob);
                    myDropzone.emit("addedfile", mockFile);
                    myDropzone.emit("thumbnail", mockFile, imgUrl);
                    myDropzone.emit("complete", mockFile);
                    myDropzone.files.push(mockFile);
                }
            })
            .catch(error => {
                console.error(`Erreur lors de la récupération de l'image de profil : ${error.message}`);
            });

        this.on("removedfile", function (file) {
            if (file.name && file.compressed) {
                Swal.fire({
                    title: 'Êtes-vous sûr?',
                    text: "Vous ne pourrez pas revenir en arrière!",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Oui, supprimer!',
                    cancelButtonText: 'Non, annuler!'
                }).then((result) => {
                    if (result.isConfirmed) {
                        fetch(`/images/profile-image/delete/${userId}`, {
                            method: 'DELETE'
                        })
                            .then(response => response.json())
                            .then(result => {
                                if (result.success) {
                                    Swal.fire(
                                        'Supprimé!',
                                        'Votre image a été supprimée.',
                                        'success'
                                    );
                                } else {
                                    console.error(`Erreur lors de la suppression de l'image de profil: ${result.message}`);
                                    Swal.fire(
                                        'Erreur!',
                                        'Une erreur est survenue lors de la suppression de l\'image.',
                                        'error'
                                    );
                                }
                            })
                            .catch(error => {
                                console.error(`Erreur lors de la suppression de l'image de profil: ${error}`);
                                Swal.fire(
                                    'Erreur!',
                                    'Une erreur est survenue lors de la suppression de l\'image.',
                                    'error'
                                );
                            });
                    } else {
                        fetch(existingImageUrl)
                            .then(response => {
                                if (response.ok) {
                                    return response.blob();
                                }
                                if (response.status === 404) {
                                    return null;
                                }
                                throw new Error('Erreur lors de la récupération de l\'image.');
                            })
                            .then(blob => {
                                if (blob) {
                                    const mockFile = { name: `profileimg-${userId}`, size: blob.size, compressed: true };
                                    const imgUrl = URL.createObjectURL(blob);
                                    myDropzone.emit("addedfile", mockFile);
                                    myDropzone.emit("thumbnail", mockFile, imgUrl);
                                    myDropzone.emit("complete", mockFile);
                                    myDropzone.files.push(mockFile);
                                }
                            })
                            .catch(error => {
                                console.error(`Erreur lors de la récupération de l'image de profil : ${error.message}`);
                            });
                        Swal.fire(
                            'Annulé',
                            'Votre image est en sécurité :)',
                            'info'
                        );
                    }
                });
            }
        });

        this.on("addedfile", function (file) {
            if (file.compressed) {
                return;
            }
            if (file.size < 200) {
                file.compressed = true;
                return;
            }
            myDropzone.removeFile(file);
            const compressionRatio = 0.9;
            new Compressor(file, {
                quality: compressionRatio,
                maxWidth: 800,
                maxHeight: 600,
                mimeType: 'image/jpeg',
                success: function (result) {
                    result.compressed = true;
                    myDropzone.addFile(result);
                    myDropzone.uploadFile(result);
                },
                error: function (err) {
                    console.error('Error compressing image:', err);
                }
            });
        });

        function processFile(file) {
            if (!file.processed) {
                file.processed = true;
                myDropzone.processFile(file);
            }
        }
    }
};

const forms = document.querySelectorAll('.dropzone');
let observing = true;

function updateImages() {
    if (!observing) return;
    observing = false;
    forms.forEach(form => {
        const childCount = form.children.length - 1;
        const image = form.querySelector('.add-wrapper');
        if (childCount == 1) {
            form.appendChild(image);
            image.style.display = 'flex';
            form.style.border = '2px dashed rgb(204, 204, 204)';
        } else {
            image.style.display = 'none';
            form.style.border = 'none';
        }
    });
    setTimeout(() => {
        observing = true;
    }, 0)
}

forms.forEach(form => {
    const observer = new MutationObserver(updateImages);
    observer.observe(form, {
        childList: true
    });
});

===== ./public/js/functionList.js =====
document.addEventListener('DOMContentLoaded', () => {

    // Ajouter une fonction
    document.getElementById('addFunctionBtn').addEventListener('click', () => {
        Swal.fire({
            title: 'Ajouter une fonction',
            html: `
        <input type="text" id="newFunctionName" class="swal2-input" placeholder="Nom de la fonction">
      `,
            confirmButtonText: 'Ajouter',
            focusConfirm: false,
            preConfirm: () => {
                const name = document.getElementById('newFunctionName').value;
                if (!name) {
                    Swal.showValidationMessage('Le nom est requis');
                } else {
                    // Appeler le backend pour ajouter la fonction
                    return fetch('/functions', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ name })
                    }).then(response => response.json());
                }
            }
        }).then((result) => {
            if (result.isConfirmed) {
                Swal.fire('Succès', 'Fonction ajoutée avec succès', 'success').then(() => location.reload());
            }
        });
    });

    // Modifier une fonction
    document.querySelectorAll('.modifyFunctionBtn').forEach(button => {
        button.addEventListener('click', () => {
            const id = button.getAttribute('data-id');
            const name = button.getAttribute('data-name');

            Swal.fire({
                title: 'Modifier la fonction',
                html: `
          <input type="text" id="modifiedFunctionName" class="swal2-input" value="${name}">
        `,
                confirmButtonText: 'Modifier',
                focusConfirm: false,
                preConfirm: () => {
                    const newName = document.getElementById('modifiedFunctionName').value;
                    if (!newName) {
                        Swal.showValidationMessage('Le nom est requis');
                    } else {
                        // Appeler le backend pour modifier la fonction
                        return fetch(`/functions/edit/${id}`, {
                            method: 'PUT',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ name: newName })
                        }).then(response => response.json());
                    }
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    Swal.fire('Succès', 'Fonction modifiée avec succès', 'success').then(() => location.reload());
                }
            });
        });
    });

    document.querySelectorAll('.deleteFunctionBtn').forEach(button => {
        button.addEventListener('click', () => {
            const id = button.getAttribute('data-id');

            Swal.fire({
                title: 'Êtes-vous sûr ?',
                text: "Vous ne pourrez pas revenir en arrière !",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Oui, supprimer',
                cancelButtonText: 'Annuler'
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch(`/functions/delete/${id}`, {
                        method: 'DELETE'
                    }).then(response => response.json())
                        .then(() => {
                            Swal.fire('Supprimée !', 'La fonction a été supprimée.', 'success').then(() => location.reload());
                        });
                }
            });
        });
    });
});


===== ./public/js/global-vote.js =====
document.addEventListener('DOMContentLoaded', () => {
    const submitVoteBtn = document.getElementById('submit-vote-btn');
    let currentIndex = 0;
    const propositions = JSON.parse(document.getElementById('propositions-data').value);
    const totalPropositions = propositions.length;

    const votes = Array(totalPropositions).fill(null);

    function renderProposition(index) {
        disableUsed(index);
        checkNoVotes();
        const proposition = propositions[index];
        document.getElementById('pagination').innerText = `${index + 1}/${totalPropositions}`;
        document.getElementById('proposition-objet').innerText = proposition.objet;
        document.getElementById('proposition-description-situation').innerText = proposition.description_situation_actuelle;
        document.getElementById('proposition-description-amelioration').innerText = proposition.description_amelioration_proposee;
        document.getElementById('proposition-status').innerText = proposition.statut === 'soldee' ? 'Soldée' : proposition.statut === 'en cours' ? 'En Cours' : proposition.statut === 'anulee' ? 'Annulée' : 'Non Soldée';
        document.getElementById('proposition-status').classList = `status ${proposition.statut}`;
        const impactsList = document.getElementById('proposition-impacts');
        impactsList.innerHTML = '';
        if (proposition.impact_economique) impactsList.innerHTML += `<li class="impact-item">💡 Impact économique</li>`;
        if (proposition.impact_technique) impactsList.innerHTML += `<li class="impact-item">🔧 Impact technique</li>`;
        if (proposition.impact_formation) impactsList.innerHTML += `<li class="impact-item">📚 Impact de formation</li>`;
        if (proposition.impact_fonctionnement) impactsList.innerHTML += `<li class="impact-item">⚙️ Impact de fonctionnement</li>`;

        renderImages(proposition.id, 'before', proposition.before_images);
        renderImages(proposition.id, 'after', proposition.after_images);

        const voteValue = votes[index];
        if (voteValue !== null) {
            document.querySelector(`input[name="grade"][value="${voteValue}"]`).checked = true;
        } else {
            const selectedRadio = document.querySelector('input[name="grade"]:checked');
            if (selectedRadio) {
                selectedRadio.checked = false;
            }
        }
    }

    function renderImages(id, type, images) {
        const galleryContainer = document.getElementById(`${type}-images`);
        if (images && images.split(',').length > 0) {
            galleryContainer.innerHTML = images.split(',').map(image => `
                <div class="image-wrapper" onclick="openModal('/images/${id}/${type}/${image}')">
                    <img src="/images/${id}/${type}/${image}" alt="Image ${type}" class="image-thumbnail">
                </div>
            `).join('');
        } else {
            galleryContainer.innerHTML = `<p class="no-images-message">Aucune image disponible.</p>`;
        }
    }
    function disableUsed(index) {
        const radios = document.querySelectorAll('.grade');

        radios.forEach(radio => {
            radio.disabled = false;
        });

        const currentVote = votes[index];

        for (let i = 1; i <= 6; i++) {
            const isDisabled = votes.some((v, idx) => (v === i && idx !== index));
            if (isDisabled) {
                radios[i - 1].disabled = true;
            }
        }
    }

    function checkNoVotes() {
        disabled = !votes.some(value => value !== null);
        console.log(disabled);

        submitVoteBtn.disabled = disabled;
    }

    renderProposition(currentIndex);

    document.getElementById('next-btn').addEventListener('click', () => {
        const voteValue = document.querySelector('input[name="grade"]:checked')?.value;
        votes[currentIndex] = voteValue ? parseInt(voteValue) : null;

        if (currentIndex < totalPropositions - 1) {
            currentIndex++;
            renderProposition(currentIndex);
        }
    });

    document.getElementById('prev-btn').addEventListener('click', () => {
        const voteValue = document.querySelector('input[name="grade"]:checked')?.value;
        votes[currentIndex] = voteValue ? parseInt(voteValue) : null;

        if (currentIndex > 0) {
            currentIndex--;
            renderProposition(currentIndex);
        }
    });

    submitVoteBtn.addEventListener('click', async () => {
        const voteValue = document.querySelector('input[name="grade"]:checked')?.value;
        votes[currentIndex] = voteValue ? parseInt(voteValue) : null;
        console.log(votes);

        const filteredVotes = propositions
            .map((proposition, index) => ({
                propositionId: proposition.id,
                value: votes[index]
            }))
            .filter(vote => vote.vote_value !== null);

        if (filteredVotes.length === 0) {
            alert('Veuillez voter sur au moins une proposition avant de soumettre.');
            return;
        }

        try {
            const response = await fetch('/voting-sessions/global-vote/submit', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ votes: filteredVotes })
            });

            const result = await response.json();
            if (response.ok) {
                alert(result.message);
            } else {
                alert(result.message || 'Erreur lors de la soumission du vote');
            }
        } catch (error) {
            console.error('Erreur lors de la soumission:', error);
        }
    });

    document.querySelectorAll('.grade').forEach(radio => {
        radio.addEventListener('click', function (e) {
            e.preventDefault();
            setTimeout(() => {
                if (this.checked === true) {
                    this.checked = false;
                } else {
                    this.checked = true;
                }
                const voteValue = document.querySelector('input[name="grade"]:checked')?.value;
                votes[currentIndex] = voteValue ? parseInt(voteValue) : null;
                checkNoVotes()

            }, 0)
        });
    });

});

function openModal(imageSrc) {
    const modal = document.getElementById('imageModal');
    const modalImg = document.getElementById('modalImage');
    const downloadLink = document.getElementById('downloadLink');

    modal.style.display = 'flex';
    modalImg.src = imageSrc;
    downloadLink.href = imageSrc;
}

window.onclick = function (event) {
    const modal = document.getElementById('imageModal');
    if (event.target === modal) {
        closeModal();
    }
};

function closeModal() {
    const modal = document.getElementById('imageModal');
    modal.style.display = 'none';
}


===== ./public/js/jury-vote.js =====
document.addEventListener('DOMContentLoaded', () => {
    // --- SETUP & DATA INITIALIZATION ---
    const sessionId = document.getElementById('session-id-data').value;
    const propositions = JSON.parse(document.getElementById('propositions-data').value);
    const initialUserVotes = JSON.parse(document.getElementById('user-votes-data').value);

    // If there are no propositions, show a message and stop.
    if (!propositions || propositions.length === 0) {
        document.querySelector('.proposition-container').innerHTML = '<h1>Aucune proposition à évaluer dans cette session.</h1><p>La page se rafraîchira si la session se termine.</p>';
        setupSessionEndPolling(sessionId);
        return;
    }

    let currentIndex = 0;
    const totalPropositions = propositions.length;
    const userVotes = new Map(initialUserVotes.map(vote => [vote.proposition_id, vote.vote_value]));

    // --- DOM ELEMENT REFERENCES ---
    const objetEl = document.getElementById('proposition-objet');
    const paginationEl = document.getElementById('pagination');
    const situationEl = document.getElementById('proposition-description-situation');
    const ameliorationEl = document.getElementById('proposition-description-amelioration');
    const statusEl = document.getElementById('proposition-status');
    const impactsListEl = document.getElementById('proposition-impacts-list');
    const beforeImagesEl = document.getElementById('before-images');
    const afterImagesEl = document.getElementById('after-images');
    const prevBtn = document.getElementById('prev-btn');
    const nextBtn = document.getElementById('next-btn');
    const ouiBtn = document.querySelector('.vote-oui');
    const nonBtn = document.querySelector('.vote-non');

    // --- CORE FUNCTIONS ---
    function renderProposition(index) {
        if (index < 0 || index >= totalPropositions) return;

        const proposition = propositions[index];
        objetEl.textContent = proposition.objet || 'Sans objet';
        paginationEl.textContent = `${index + 1} / ${totalPropositions}`;
        situationEl.textContent = proposition.description_situation_actuelle;
        ameliorationEl.textContent = proposition.description_amelioration_proposee;
        statusEl.className = `status ${proposition.statut}`;
        statusEl.textContent = proposition.statut.charAt(0).toUpperCase() + proposition.statut.slice(1);

        impactsListEl.innerHTML = '';
        if (proposition.impact_economique) impactsListEl.innerHTML += `<li class="impact-item">💡 Impact économique</li>`;
        if (proposition.impact_technique) impactsListEl.innerHTML += `<li class="impact-item">🔧 Impact technique</li>`;
        if (proposition.impact_formation) impactsListEl.innerHTML += `<li class="impact-item">📚 Impact de formation</li>`;
        if (proposition.impact_fonctionnement) impactsListEl.innerHTML += `<li class="impact-item">⚙️ Impact de fonctionnement</li>`;
        if (!impactsListEl.innerHTML) impactsListEl.innerHTML = `<li class="impact-item">Aucun impact spécifié</li>`;

        renderImages(proposition.id, 'before', proposition.before_images, beforeImagesEl);
        renderImages(proposition.id, 'after', proposition.after_images, afterImagesEl);
        
        updateButtonStates();
        updateVoteSelection();
    }

    function renderImages(id, type, images, container) {
        container.innerHTML = '';
        if (images && images.trim()) {
            const imageList = images.split(',');
            container.innerHTML = imageList.map(image => `
                <div class="image-wrapper" onclick="openModal('/images/${id}/${type}/${image}')">
                    <img src="/images/${id}/${type}/${image}" alt="Image ${type}" class="image-thumbnail">
                </div>
            `).join('');
        } else {
            container.innerHTML = `<p class="no-images-message">Aucune image disponible.</p>`;
        }
    }

    function updateButtonStates() {
        prevBtn.disabled = currentIndex === 0;
        nextBtn.disabled = currentIndex === totalPropositions - 1;
        // The vote buttons (ouiBtn, nonBtn) are enabled/disabled within updateVoteSelection
    }

    function updateVoteSelection() {
        const currentPropositionId = propositions[currentIndex].id;
        const vote = userVotes.get(currentPropositionId);

        ouiBtn.classList.remove('selected');
        nonBtn.classList.remove('selected');

        // Buttons are always enabled unless you want to disable them after *any* vote.
        // For "can change vote but not unvote", they should generally remain enabled.
        // ouiBtn.disabled = false;
        // nonBtn.disabled = false;


        if (vote === 6) { // Oui
            ouiBtn.classList.add('selected');
        } else if (vote === 0) { // Non (assuming 1 for Non, adjust if 0)
            nonBtn.classList.add('selected');
        }
    }

    async function submitVote(newVoteValue) {
        const propositionId = propositions[currentIndex].id;
        const currentVote = userVotes.get(propositionId);

        // **MODIFICATION START: Allow changing vote, but not unvoting**
        // If the user is trying to click the same button they already selected, do nothing.
        // This effectively prevents "unvoting" by clicking the selected button again.
        if (currentVote === newVoteValue) {
            console.log("Already selected this option. No change.");
            return;
        }
        // **MODIFICATION END**

        // Optimistically update the local state
        const previousVoteForRevert = currentVote; // Store the actual previous vote for revert
        userVotes.set(propositionId, newVoteValue);
        updateVoteSelection();

        try {
            const response = await fetch(`/voting-sessions/proposition/${propositionId}/vote`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ grade: newVoteValue })
            });
            if (!response.ok) {
                let errorMessage = 'Failed to save vote';
                try {
                    const errorData = await response.json();
                    if (errorData && errorData.message) {
                        errorMessage = errorData.message;
                    }
                } catch (e) { /* Ignore */ }
                throw new Error(errorMessage);
            }
            // Optional: Success feedback
            // Swal.fire({ toast: true, position: 'top-end', icon: 'success', title: 'Vote mis à jour!', showConfirmButton: false, timer: 1500 });

        } catch (error) {
            console.error("Error submitting vote:", error);
            // Revert optimistic update on failure
            if (previousVoteForRevert === undefined) { // If there was truly no vote before (first vote failed)
                userVotes.delete(propositionId);
            } else { // Revert to the actual previous vote
                userVotes.set(propositionId, previousVoteForRevert);
            }
            updateVoteSelection();
            Swal.fire('Erreur', `Impossible de sauvegarder le vote: ${error.message}. Veuillez réessayer.`, 'error');
        }
    }

    function setupSessionEndPolling(sid) {
        const sessionInterval = setInterval(async () => {
            try {
                const response = await fetch(`/voting-sessions/status/${sid}`);
                const data = await response.json();

                if (data.success && data.isOver) {
                    clearInterval(sessionInterval);
                    await Swal.fire({
                        title: 'Session Terminée!',
                        text: 'La session de vote est terminée. Vous allez être redirigé.',
                        icon: 'info',
                        timer: 3000,
                        timerProgressBar: true,
                        allowOutsideClick: false,
                        showConfirmButton: false,
                    });
                    window.location.href = `/voting-sessions/${sid}`;
                }
            } catch (error) {
                console.error('Failed to check session status, stopping poll.', error);
                clearInterval(sessionInterval);
            }
        }, 5000);
    }

    // --- EVENT LISTENERS ---
    prevBtn.addEventListener('click', () => {
        if (currentIndex > 0) {
            currentIndex--;
            renderProposition(currentIndex);
        }
    });

    nextBtn.addEventListener('click', () => {
        if (currentIndex < totalPropositions - 1) {
            currentIndex++;
            renderProposition(currentIndex);
        }
    });

    // Vote values: Oui = 6, Non = 1 (or 0 if that's your convention for Non)
    ouiBtn.addEventListener('click', () => submitVote(6));
    nonBtn.addEventListener('click', () => submitVote(0)); // Ensure this value matches your 'Non'

    // --- INITIALIZATION ---
    renderProposition(currentIndex);
    setupSessionEndPolling(sessionId);
});

// Modal functions (remain unchanged)
function openModal(imageSrc) {
    const modal = document.getElementById('imageModal');
    const modalImg = document.getElementById('modalImage');
    const downloadLink = document.getElementById('downloadLink');
    if (modal) {
        modal.style.display = 'flex';
        modalImg.src = imageSrc;
        downloadLink.href = imageSrc;
    }
}

function closeModal() {
    const modal = document.getElementById('imageModal');
    if (modal) {
        modal.style.display = 'none';
    }
}


===== ./public/js/mespropositions.js =====
document.addEventListener('DOMContentLoaded', () => {
    const columnDefs = [{
        headerName: "ID",
        field: "display_id",
        sortable: true,
        filter: true,
        resizable: true,
        flex: 1,
        sort: 'desc',
        minWidth: 100,
        maxWidth: 100
    },
    {
        headerName: "Objet",
        field: "objet",
        sortable: true,
        filter: true,
        resizable: true,
        flex: 2,
        minWidth: 200
    },
    {
        headerName: "Situation Actuelle",
        field: "description_situation_actuelle",
        sortable: true,
        filter: true,
        resizable: true,
        flex: 3,
        minWidth: 300
    },
    {
        headerName: "Amélioration Proposée",
        field: "description_amelioration_proposee",
        sortable: true,
        filter: true,
        resizable: true,
        flex: 3,
        minWidth: 300
    },
    {
        headerName: "Date",
        field: "date_emission",
        sortable: true,
        flex: 1.5,
        valueFormatter: params => params.value ? new Date(params.value).toLocaleDateString('fr-FR') : '',
        minWidth: 150
    },
    {
        sortable: false,
        filter: false,
        headerName: "Actions",
        cellRenderer: 'buttonRenderer',
        maxWidth: 120,
        minWidth: 100
    }
    ];

    const dataContainer = document.getElementById('dataContainer');
    const rowData = JSON.parse(dataContainer.getAttribute('data-row-data'));

    const buttonRenderer = (params) => {
        const button = document.createElement('button');
        button.innerText = 'Détails';
        button.className = 'button secondary';
        button.onclick = (event) => {
            event.stopPropagation();
            window.location.href = `/propositions/proposition/${params.data.id}`;
        };
        return button;
    };

    const gridOptions = {
        columnDefs: columnDefs,
        rowData: rowData,
        defaultColDef: {
            sortable: true,
            filter: true,
            resizable: true,
            minWidth: 100
        },
        localeText: AG_GRID_LOCALE_FR,
        pagination: true,
        paginationPageSize: 50,
        domLayout: 'autoHeight',
        suppressRowClickSelection: true,
        components: {
            buttonRenderer: buttonRenderer
        },
        onRowClicked: params => {
            showRowDetails(params.data);
        },
        onGridReady: params => {
            params.api.refreshCells({
                force: true
            });
        }
    };

    const eGridDiv = document.querySelector('#myGrid');
    agGrid.createGrid(eGridDiv, gridOptions);

    const modal = document.getElementById('myModal');
    const closeButton = document.querySelector('.close');
    const rowDetails = document.getElementById('rowDetails');
    const viewDetailsButton = document.getElementById('viewDetailsButton');

    function showRowDetails(data) {
        rowDetails.innerHTML = `
          <p><strong>ID:</strong> ${data.display_id}</p>
          <p><strong>Objet:</strong> ${escapeHtml(data.objet)}</p>
          <p><strong>Situation Actuelle:</strong> ${escapeHtml(data.description_situation_actuelle)}</p>
          <p><strong>Amélioration Proposée:</strong> ${escapeHtml(data.description_amelioration_proposee)}</p>
          <p><strong>Date:</strong> ${new Date(data.date_emission).toLocaleDateString('fr-FR')}</p>
        `;
        modal.style.display = 'flex';

        viewDetailsButton.onclick = () => {
            window.location.href = `/propositions/proposition/${data.id}`;
        };
    }

    closeButton.onclick = () => {
        modal.style.display = 'none';
    };

    window.onclick = event => {
        if (event.target === modal) {
            modal.style.display = 'none';
        }
    };
});

===== ./public/js/navbar.js =====
let dropdowns = document.querySelectorAll('.navbar-dropdown');
let activeDropdown = null;  // Store the currently active dropdown

if (dropdowns.length) {
    dropdowns.forEach((dropdown) => {
        let toggler = dropdown.querySelector('.dropdown-toggler'); // The <a> tag with the dropdown-toggler class

        if (toggler) {
            toggler.addEventListener('click', (event) => {
                event.stopPropagation(); // Prevent click event from bubbling up to the window

                // Check if the click was on the <a> or its children (e.g., <i> element)
                let target = document.querySelector(`#${event.target.closest('a').dataset.dropdown}`);

                // If a dropdown is already open and it's not the one clicked, close it
                if (activeDropdown && activeDropdown !== target) {
                    activeDropdown.classList.remove('show');
                }

                // Toggle the clicked dropdown visibility
                if (target) {
                    target.classList.toggle('show');
                    // If the dropdown is now open, set it as the active dropdown
                    activeDropdown = target.classList.contains('show') ? target : null;
                }
            });
        }
    });
}

// Close dropdowns when clicking outside
window.addEventListener('click', (event) => {
    if (activeDropdown && !event.target.closest('.navbar-dropdown')) {
        activeDropdown.classList.remove('show');
        activeDropdown = null;
    }
});

// Handle small screen toggler
function handleSmallScreens() {
    document.querySelector('.navbar-toggler').addEventListener('click', () => {
        let navbarMenu = document.querySelector('.navbar-menu');

        // Toggle the menu visibility for small screens
        navbarMenu.classList.toggle('active');
    });
}

handleSmallScreens();


===== ./public/js/pie-chart.js =====
document.addEventListener('DOMContentLoaded', function () {
    const yearSelector = document.getElementById('yearSelector');
    const monthSelector = document.getElementById('monthSelector');
    const pieChartCanvas = document.getElementById('pieChart');
    let pieChart;

    async function fetchYears() {
        try {
            const response = await fetch('/charts/years');
            const years = await response.json();

            yearSelector.innerHTML = '';
            years.forEach(year => createYearCheckbox(year));
            fetchMonths();
            fetchPieChartData();
        } catch (error) {
            console.error('Erreur lors de la récupération des années:', error);
        }
    }

    function createYearCheckbox(year) {
        const checkbox = document.createElement('input');
        checkbox.type = 'checkbox';
        checkbox.value = year;
        checkbox.id = `year-${year}`;
        checkbox.addEventListener('change', function () {
            fetchMonths();
            fetchPieChartData();
        });
        checkbox.checked = true;

        const label = document.createElement('label');
        label.htmlFor = `year-${year}`;
        label.textContent = year;

        yearSelector.appendChild(checkbox);
        yearSelector.appendChild(label);
    }

    async function fetchMonths() {
        const selectedYears = Array.from(yearSelector.querySelectorAll('input:checked')).map(input => input.value);

        if (selectedYears.length === 0) {
            monthSelector.innerHTML = '';
            return;
        }

        try {
            const response = await fetch(`/charts/months?years=${selectedYears.join(',')}`);
            const monthsData = await response.json();
            monthSelector.innerHTML = '';

            const monthsByYear = monthsData.reduce((acc, { month, year }) => {
                if (!acc[year]) acc[year] = [];
                acc[year].push(month);
                return acc;
            }, {});

            Object.keys(monthsByYear).forEach(year => {
                const yearSection = document.createElement('div');
                yearSection.classList.add('year-group');
                yearSection.innerHTML = `<h3>${year}</h3>`;

                monthsByYear[year].forEach(month => {
                    const monthLabel = new Date(0, month - 1).toLocaleString('fr', { month: 'long' });
                    const checkbox = document.createElement('input');
                    checkbox.type = 'checkbox';
                    checkbox.value = `${month}-${year}`;
                    checkbox.id = `month-${month}-${year}`;
                    checkbox.checked = true;
                    checkbox.addEventListener('change', fetchPieChartData); // Call fetchPieChartData here

                    const label = document.createElement('label');
                    label.htmlFor = `month-${month}-${year}`;
                    label.textContent = `${monthLabel} ${year}`;

                    yearSection.appendChild(checkbox);
                    yearSection.appendChild(label);
                });

                monthSelector.appendChild(yearSection);
            });

            fetchPieChartData();
        } catch (error) {
            console.error('Erreur lors de la récupération des mois:', error);
        }
    }

    async function fetchPieChartData() {
        const years = getSelectedValues(yearSelector);
        const months = getSelectedValues(monthSelector);

        if (years.length === 0 || months.length === 0) return;

        try {
            const response = await fetch(`/charts/pie-chart-data?years=${years.join(',')}&months=${months.join(',')}`);
            const data = await response.json();
            updateTable(data);
            updatePieChart(data);
        } catch (error) {
            console.error('Erreur lors de la récupération des données du graphique:', error);
        }
    }

    function updateTable(data) {
        const tableBody = document.getElementById('tableBody');
        tableBody.innerHTML = '';

        let totalRetenu = 0;
        let totalEnCours = 0;
        let grandTotal = 0;

        data.forEach(row => {
            const [month, year] = row.month.split('-');
            const monthName = new Date(0, month - 1).toLocaleString('fr', { month: 'long' });

            // Calculate totals
            totalRetenu += row.nb_propositions_retenu;
            totalEnCours += row.nb_propositions_en_cours;

            // Total for this row
            const total = row.nb_propositions_retenu + row.nb_propositions_en_cours;
            grandTotal += total;

            const tableRow = `<tr>
            <td>${monthName} ${year}</td>
            <td>${row.nb_propositions_retenu}</td>
            <td>${row.nb_propositions_en_cours}</td>
            <td>${total}</td>
        </tr>`;
            tableBody.innerHTML += tableRow;
        });

        // Add total row at the bottom
        const totalRow = `<tr>
        <td><strong>Total</strong></td>
        <td><strong>${totalRetenu}</strong></td>
        <td><strong>${totalEnCours}</strong></td>
        <td><strong>${grandTotal}</strong></td>
    </tr>`;
        tableBody.innerHTML += totalRow;
    }


    function updatePieChart(data) {
        const retenuCount = data.reduce((sum, row) => sum + row.nb_propositions_retenu, 0);
        const nonRetenuCount = data.reduce((sum, row) => sum + row.nb_propositions_en_cours, 0);

        const chartData = {
            labels: ['Propositions Soldée', 'Propositions en cours'],
            datasets: [{
                data: [retenuCount, nonRetenuCount],
                backgroundColor: ['#4caf50', '#f44336'],
            }]
        };

        if (pieChart) pieChart.destroy();
        pieChart = new Chart(pieChartCanvas, {
            type: 'pie',
            data: chartData,
            options: {
                responsive: true,
                plugins: {
                    tooltip: {
                        callbacks: {
                            label: context => `${context.label}: ${context.raw} (${((context.raw / (retenuCount + nonRetenuCount)) * 100).toFixed(2)}%)`
                        }
                    }
                }
            }
        });
    }

    function getSelectedValues(container) {
        return Array.from(container.querySelectorAll('input:checked')).map(input => input.value);
    }

    fetchYears();
});


===== ./public/js/propositionForm.js =====
const textElements = document.querySelectorAll('input[type="text"], textarea');

textElements.forEach((element) => {
    const counter = element.nextElementSibling;
    const maxLength = element.getAttribute('maxlength');

    const currentLength = element.value.length;
    counter.textContent = `${currentLength} / ${maxLength}`;

    if (currentLength >= maxLength) {
        counter.classList.add('warning');
    } else {
        counter.classList.remove('warning');
    }
    element.addEventListener('input', function () {
        const currentLength = element.value.length;
        counter.textContent = `${currentLength} / ${maxLength}`;

        if (currentLength >= maxLength) {
            counter.classList.add('warning');
        } else {
            counter.classList.remove('warning');
        }
    });
});

const form = document.getElementById('upload-form');
const errorMessageContainer = document.getElementById('error-message');
form.addEventListener('keydown', function (event) {
    if (event.key === 'Enter') event.preventDefault();
});
form.addEventListener('submit', async (event) => {
    event.preventDefault();
    const formData = new FormData(form);
    try {
        const response = await fetch('/propositions/add', {
            method: 'POST',
            body: formData
        });

        const result = await response.json();
        console.log(result);

        if (response.ok) {
            Swal.fire({
                title: 'Proposition ajoutée!',
                icon: 'success',
                showCancelButton: true,
                confirmButtonText: 'Ajouter des images',
                cancelButtonText: 'Pas maintenant',
                allowOutsideClick: false,
                preConfirm: () => {
                    window.location.href = '/propositions/proposition/' + result.propositionId + '#before-gallery';
                }
            }).then((result) => {
                if (result.dismiss === Swal.DismissReason.cancel) {
                    window.location.href = '/propositions/mes-propositions';
                }
            });
        } else {
            Swal.fire({
                title: 'Erreur!',
                icon: 'error',
                confirmButtonText: 'Ok',
                allowOutsideClick: false
            });
        }
    } catch (error) {
        Swal.fire({
            title: 'Erreur inconnue!',
            text: 'Une erreur inattendue s\'est produite. Veuillez réessayer plus tard ou contacter le support.',
            icon: 'error',
            timer: 1000,
            showConfirmButton: false,
            allowOutsideClick: false
        }).then(function () {
            window.location.href = '/';
        });
    }
});

===== ./public/js/propositionFormUpdate.js =====
const textElements = document.querySelectorAll('input[type="text"], textarea');

textElements.forEach((element) => {
    const counter = element.nextElementSibling;
    const maxLength = element.getAttribute('maxlength');

    const currentLength = element.value.length;
    counter.textContent = `${currentLength} / ${maxLength}`;

    if (currentLength >= maxLength) {
        counter.classList.add('warning');
    } else {
        counter.classList.remove('warning');
    }
    element.addEventListener('input', function () {
        const currentLength = element.value.length;
        counter.textContent = `${currentLength} / ${maxLength}`;

        if (currentLength >= maxLength) {
            counter.classList.add('warning');
        } else {
            counter.classList.remove('warning');
        }
    });
});
const form = document.getElementById('upload-form');

const errorMessageContainer = document.getElementById('error-message');

form.addEventListener('keydown', function (event) {
    if (event.key === 'Enter') event.preventDefault();
});

form.addEventListener('submit', async (event) => {

    event.preventDefault();
    const formData = new FormData(form);

    const url = form.getAttribute('action');

    try {
        const response = await fetch(url, {
            method: 'POST',
            body: formData
        });

        const result = await response.json();
        console.log(result);

        if (response.ok) {
            Swal.fire({
                title: 'Proposition modifiée avec succès !',
                icon: 'success',
                showCancelButton: true,
                confirmButtonText: 'Ajouter des images',
                cancelButtonText: 'Pas maintenant',
                allowOutsideClick: false,
                preConfirm: () => {
                    window.location.href = '/propositions/proposition/' + result.propositionId + '#before-gallery';
                }
            }).then((swalResult) => {
                if (swalResult.dismiss === Swal.DismissReason.cancel) {
                    window.location.href = '/propositions/mes-propositions';
                }
            });
        } else {
            Swal.fire({
                title: 'Erreur!',
                icon: 'error',
                confirmButtonText: 'Ok',
                allowOutsideClick: false
            });
        }
    } catch (error) {
        Swal.fire({
            title: 'Erreur inconnue!',
            text: 'Une erreur inattendue s\'est produite. Veuillez réessayer plus tard ou contacter le support.',
            icon: 'error',
            timer: 1000,
            showConfirmButton: false,
            allowOutsideClick: false
        }).then(function () {
            window.location.href = '/';
        });
    }
});


===== ./public/js/stacked.js =====
let chartInstance;
const frenchMonths = ['Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet', 'Août', 'Septembre', 'Octobre', 'Novembre', 'Décembre'];

const monthColors = [
    '#1f77b4', // Blue - Janvier
    '#ff7f0e', // Orange - Février
    '#2ca02c', // Green - Mars
    '#d62728', // Red - Avril
    '#9467bd', // Purple - Mai
    '#8c564b', // Brown - Juin
    '#e377c2', // Pink - Juillet
    '#7f7f7f', // Gray - Août
    '#bcbd22', // Yellow-Green - Septembre
    '#17becf', // Cyan - Octobre
    '#bc79af', // Plum - Novembre
    '#aec7e8'  // Light Blue - Décembre
];

async function updateChart() {
    const year = document.getElementById('yearSelect').value;

    try {
        const response = await fetch(`/charts/stacked-data?year=${year}`);
        if (!response.ok) throw new Error('Échec du chargement des données');
        const data = await response.json();

        renderTable(data);
        renderChart(data);
    } catch (error) {
        console.error(error);
        alert('Une erreur s\'est produite lors du chargement des données');
    }
}

function getActiveMonths(data) {
    const activeMonths = [];
    for (let month = 1; month <= 12; month++) {
        let hasData = false;
        for (const user in data) {
            if (data[user][month - 1] > 0) {
                hasData = true;
                break;
            }
        }
        if (hasData) activeMonths.push(month);
    }
    return activeMonths;
}

function renderTable(data) {
    const tableBody = document.getElementById('tableBody');
    const tableHead = document.querySelector('#propositionsTable thead tr');
    tableBody.innerHTML = '';
    tableHead.innerHTML = '';

    const activeMonths = getActiveMonths(data);
    const activeMonthNames = activeMonths.map(month => frenchMonths[month - 1]);

    const userHeader = document.createElement('th');
    userHeader.textContent = 'Utilisateur';
    tableHead.appendChild(userHeader);

    activeMonthNames.forEach(month => {
        const monthHeader = document.createElement('th');
        monthHeader.textContent = month;
        tableHead.appendChild(monthHeader);
    });

    const totalHeader = document.createElement('th');
    totalHeader.textContent = 'Total';
    tableHead.appendChild(totalHeader);

    Object.keys(data).forEach(username => {
        const row = document.createElement('tr');
        const userData = data[username];

        const userCell = document.createElement('td');
        userCell.textContent = username;
        row.appendChild(userCell);

        let total = 0;
        activeMonths.forEach(month => {
            const cell = document.createElement('td');
            const count = userData[month - 1] || 0;
            cell.textContent = count;
            row.appendChild(cell);
            total += count;
        });

        const totalCell = document.createElement('td');
        totalCell.textContent = total;
        row.appendChild(totalCell);

        tableBody.appendChild(row);
    });

    const totalRow = document.createElement('tr');
    const totalLabelCell = document.createElement('td');
    totalLabelCell.textContent = 'Total par mois';
    totalLabelCell.style.fontWeight = 'bold';
    totalRow.appendChild(totalLabelCell);

    activeMonths.forEach(month => {
        let monthTotal = 0;
        Object.keys(data).forEach(username => {
            monthTotal += data[username][month - 1] || 0;
        });
        const monthTotalCell = document.createElement('td');
        monthTotalCell.textContent = monthTotal;
        totalRow.appendChild(monthTotalCell);
    });

    const grandTotal = activeMonths.reduce((total, month) => {
        return total + Object.keys(data).reduce((userTotal, username) => {
            return userTotal + (data[username][month - 1] || 0);
        }, 0);
    }, 0);

    const grandTotalCell = document.createElement('td');
    grandTotalCell.textContent = grandTotal;
    totalRow.appendChild(grandTotalCell);

    tableBody.appendChild(totalRow);
}

function renderChart(data) {
    const ctx = document.getElementById('stackedChart').getContext('2d');
    const activeMonths = getActiveMonths(data);
    const activeMonthNames = activeMonths.map(month => frenchMonths[month - 1]);
    const users = Object.keys(data);
    const datasets = [];

    activeMonths.forEach(month => {
        datasets.push({
            label: frenchMonths[month - 1],
            data: users.map(username => data[username][month - 1] || 0),
            backgroundColor: monthColors[month - 1],
            borderColor: 'rgba(0, 0, 0, 0.1)',
            borderWidth: 1,
        });
    });

    if (chartInstance) {
        chartInstance.destroy();
    }

    chartInstance = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: users,
            datasets: datasets
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'top',
                },
            },
            scales: {
                x: {
                    stacked: true,
                },
                y: {
                    stacked: true,
                }
            }
        }
    });
}


window.onload = () => {
    updateChart();
};


===== ./public/js/status.js =====
function checkActiveSession() {
    fetch('/voting-sessions/check-active-session')
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                if (data.sessionType === "jury") {
                    document.querySelector('.container').innerHTML = `
              <p class="info">Une session de vote du jury est active. Prêt à évaluer?</p>
              <button class="btn" onclick="window.location.href='/voting-sessions/jury-vote'">Commencer</button>
              <button class="btn" onclick="history.back()">Retour</button>`;
                } else if (data.sessionType === "global") {
                    document.querySelector('.container').innerHTML = `
              <p class="info">Une session de vote globale a été trouvée.</p>
              <button class="btn" onclick="window.location.href='/voting-sessions/global-vote'">Démarrer</button>
              <button class="btn" onclick="history.back()">Retour</button>`;
                }
            } else {
                document.querySelector('.container').innerHTML = `
            <p class="info">Aucune session de vote active n'a été trouvée pour le moment.</p>
            <button class="btn" onclick="history.back()">Retour</button>`;
            }
        })
        .catch(error => {
            console.error('Error fetching session status:', error);
            document.querySelector('.container').innerHTML = `<p class="info error">Erreur de communication avec le serveur.</p>`;
        });
}

// Check immediately on load, then set an interval
checkActiveSession();
setInterval(checkActiveSession, 5000);

===== ./public/localization/fr-FR.js =====

const AG_GRID_LOCALE_FR = {
    // Set Filter
    selectAll: '(Sélectionner tout)',
    selectAllSearchResults: '(Sélectionner tous les résultats de recherche)',
    addCurrentSelectionToFilter: 'Ajouter la sélection actuelle au filtre',
    searchOoo: 'Chercher...',
    blanks: '(Vides)',
    noMatches: 'Aucune correspondance',

    // Number Filter & Text Filter
    filterOoo: 'Filtrer...',
    equals: 'Égal à',
    notEqual: "N'est pas égal à",
    blank: 'Vide',
    notBlank: 'Non vide',
    empty: 'Choisissez-en un',

    // Number Filter
    lessThan: 'Moins de',
    greaterThan: 'Plus de',
    lessThanOrEqual: 'Moins de ou égal à',
    greaterThanOrEqual: 'Plus de ou égal à',
    inRange: 'Entre',
    inRangeStart: 'De',
    inRangeEnd: 'À',

    // Text Filter
    contains: 'Contient',
    notContains: 'Ne contient pas',
    startsWith: 'Commence par',
    endsWith: 'Se termine par',

    // Date Filter
    dateFormatOoo: 'yyyy-mm-dd',
    before: 'Avant',
    after: 'Après',

    // Filter Conditions
    andCondition: 'ET',
    orCondition: 'OU',

    // Filter Buttons
    applyFilter: 'Appliquer',
    resetFilter: 'Réinitialiser',
    clearFilter: 'Effacer',
    cancelFilter: 'Annuler',

    // Filter Titles
    textFilter: 'Filtre de texte',
    numberFilter: 'Filtre numérique',
    dateFilter: 'Filtre de date',
    setFilter: 'Filtre de jeu',

    // Group Column Filter
    groupFilterSelect: 'Sélectionner le champ :',

    // Advanced Filter
    advancedFilterContains: 'contient',
    advancedFilterNotContains: 'ne contient pas',
    advancedFilterTextEquals: 'égal',
    advancedFilterTextNotEqual: "n'est pas égal",
    advancedFilterStartsWith: 'commence par',
    advancedFilterEndsWith: 'se termine par',
    advancedFilterBlank: 'est vide',
    advancedFilterNotBlank: "n'est pas vide",
    advancedFilterEquals: '=',
    advancedFilterNotEqual: '!=',
    advancedFilterGreaterThan: '>',
    advancedFilterGreaterThanOrEqual: '>=',
    advancedFilterLessThan: '<',
    advancedFilterLessThanOrEqual: '<=',
    advancedFilterTrue: 'est vrai',
    advancedFilterFalse: 'est faux',
    advancedFilterAnd: 'ET',
    advancedFilterOr: 'OU',
    advancedFilterApply: 'Appliquer',
    advancedFilterBuilder: 'Constructeur',
    advancedFilterValidationMissingColumn: 'La colonne est manquante',
    advancedFilterValidationMissingOption: "L'option est manquante",
    advancedFilterValidationMissingValue: 'La valeur est manquante',
    advancedFilterValidationInvalidColumn: 'Colonne non trouvée',
    advancedFilterValidationInvalidOption: 'Option non trouvée',
    advancedFilterValidationMissingQuote: 'Il manque une guillemet de fin à la valeur',
    advancedFilterValidationNotANumber: "La valeur n'est pas un nombre",
    advancedFilterValidationInvalidDate: "La valeur n'est pas une date valide",
    advancedFilterValidationMissingCondition: 'La condition est manquante',
    advancedFilterValidationJoinOperatorMismatch:
        "Les opérateurs de jonction au sein d'une condition doivent être identiques",
    advancedFilterValidationInvalidJoinOperator: 'Opérateur de jonction non trouvé',
    advancedFilterValidationMissingEndBracket: 'Guillemet de fin manquante',
    advancedFilterValidationExtraEndBracket: 'Trop de crochets de fin',
    advancedFilterValidationMessage: "L'expression contient une erreur. ${variable} - ${variable}.",
    advancedFilterValidationMessageAtEnd: "L'expression contient une erreur. ${variable} à la fin de l'expression.",
    advancedFilterBuilderTitle: 'Filtre Avancé',
    advancedFilterBuilderApply: 'Appliquer',
    advancedFilterBuilderCancel: 'Annuler',
    advancedFilterBuilderAddButtonTooltip: 'Ajouter un filtre ou un groupe',
    advancedFilterBuilderRemoveButtonTooltip: 'Supprimer',
    advancedFilterBuilderMoveUpButtonTooltip: 'Monter',
    advancedFilterBuilderMoveDownButtonTooltip: 'Descendre',
    advancedFilterBuilderAddJoin: 'Ajouter un groupe',
    advancedFilterBuilderAddCondition: 'Ajouter un filtre',
    advancedFilterBuilderSelectColumn: 'Sélectionner une colonne',
    advancedFilterBuilderSelectOption: 'Sélectionner une option',
    advancedFilterBuilderEnterValue: 'Entrer une valeur...',
    advancedFilterBuilderValidationAlreadyApplied: 'Le filtre actuel est déjà appliqué.',
    advancedFilterBuilderValidationIncomplete: 'Toutes les conditions ne sont pas remplies.',
    advancedFilterBuilderValidationSelectColumn: 'Vous devez sélectionner une colonne.',
    advancedFilterBuilderValidationSelectOption: 'Vous devez sélectionner une option.',
    advancedFilterBuilderValidationEnterValue: 'Vous devez entrer une valeur.',

    // Side Bar
    columns: 'Colonnes',
    filters: 'Filtres',

    // columns tool panel
    pivotMode: 'Mode pivot',
    groups: 'Groupes de lignes',
    rowGroupColumnsEmptyMessage: 'Faites glisser ici pour définir les groupes de lignes',
    values: 'Valeurs',
    valueColumnsEmptyMessage: 'Faites glisser ici pour agréger',
    pivots: 'Étiquettes de colonnes',
    pivotColumnsEmptyMessage: 'Faites glisser ici pour définir les étiquettes de colonnes',

    // Header of the Default Group Column
    group: 'Groupe',

    // Row Drag
    rowDragRow: 'rang',
    rowDragRows: 'rangs',

    // Other
    loadingOoo: 'Chargement...',
    loadingError: 'ERR',
    noRowsToShow: 'Aucune ligne à afficher',
    enabled: 'Activé',

    // Menu
    pinColumn: 'Épingler la colonne',
    pinLeft: 'Épingler à gauche',
    pinRight: 'Épingler à droite',
    noPin: "Pas d'épingle",
    valueAggregation: 'Agrégation de valeur',
    noAggregation: 'Aucun',
    autosizeThisColumn: 'Ajuster automatiquement cette colonne',
    autosizeAllColumns: 'Ajuster automatiquement toutes les colonnes',
    groupBy: 'Grouper par',
    ungroupBy: 'Dégrouper par',
    ungroupAll: 'Dégrouper tout',
    addToValues: 'Ajouter ${variable} aux valeurs',
    removeFromValues: 'Retirer ${variable} des valeurs',
    addToLabels: 'Ajouter ${variable} aux étiquettes',
    removeFromLabels: 'Retirer ${variable} des étiquettes',
    resetColumns: 'Réinitialiser les colonnes',
    expandAll: 'Développer tous les groupes de lignes',
    collapseAll: 'Fermer tous les groupes de lignes',
    copy: 'Copier',
    ctrlC: 'Ctrl+C',
    ctrlX: 'Ctrl+X',
    copyWithHeaders: 'Copier avec en-têtes',
    copyWithGroupHeaders: 'Copier avec en-têtes de groupe',
    cut: 'Couper',
    paste: 'Coller',
    ctrlV: 'Ctrl+V',
    export: 'Exporter',
    csvExport: 'Export CSV',
    excelExport: 'Export Excel',
    columnFilter: 'Filtre de colonne',
    columnChooser: 'Choisir les colonnes',
    chooseColumns: 'Choisir les colonnes',
    sortAscending: 'Trier par ordre croissant',
    sortDescending: 'Trier par ordre décroissant',
    sortUnSort: 'Effacer le tri',

    // Enterprise Menu Aggregation and Status Bar
    sum: 'Somme',
    first: 'Premier',
    last: 'Dernier',
    min: 'Min',
    max: 'Max',
    none: 'Aucun',
    count: 'Nombre',
    avg: 'Moyenne',
    filteredRows: 'Filtré',
    selectedRows: 'Sélectionné',
    totalRows: 'Total des Lignes',
    totalAndFilteredRows: 'Lignes',
    more: 'Plus',
    to: 'à',
    of: 'de',
    page: 'Page',
    pageLastRowUnknown: '?',
    nextPage: 'Page Suivante',
    lastPage: 'Dernière Page',
    firstPage: 'Première Page',
    previousPage: 'Page Précédente',
    pageSizeSelectorLabel: 'Taille de la Page :',
    footerTotal: 'Total',

    // Pivoting
    pivotColumnGroupTotals: 'Total',

    // Enterprise Menu (Charts)
    pivotChartAndPivotMode: 'Graphique pivot et mode pivot',
    pivotChart: 'Graphique pivot',
    chartRange: 'Plage de graphique',
    columnChart: 'Colonne',
    groupedColumn: 'Groupé',
    stackedColumn: 'Empilé',
    normalizedColumn: '100% empilé',
    barChart: 'Barre',
    groupedBar: 'Groupé',
    stackedBar: 'Empilé',
    normalizedBar: '100% empilé',
    pieChart: 'Camembert',
    pie: 'Camembert',
    donut: 'Donut',
    line: 'Ligne',
    xyChart: 'X Y (Nuage de points)',
    scatter: 'Nuage de points',
    bubble: 'Bulle',
    areaChart: 'Aire',
    area: 'Aire',
    stackedArea: 'Empilé',
    normalizedArea: '100% empilé',
    histogramChart: 'Histogramme',
    polarChart: 'Polaire',
    radarLine: 'Ligne radar',
    radarArea: 'Aire radar',
    nightingale: 'Nightingale',
    radialColumn: 'Colonne radiale',
    radialBar: 'Barre radiale',
    statisticalChart: 'Statistique',
    boxPlot: 'Boîte à moustaches',
    rangeBar: 'Barre de plage',
    rangeArea: 'Aire de plage',
    hierarchicalChart: 'Hiérarchique',
    treemap: 'Arborescence',
    sunburst: 'Rayonnement',
    specializedChart: 'Spécialisé',
    waterfall: 'Cascade',
    heatmap: 'Carte thermique',
    combinationChart: 'Combinaison',
    columnLineCombo: 'Colonne et ligne',
    AreaColumnCombo: 'Aire et colonne',

    // Charts
    pivotChartTitle: 'Graphique croisé dynamique',
    rangeChartTitle: 'Graphique en plage',
    settings: 'Graphique',
    data: 'Configurer',
    format: 'Personnaliser',
    categories: 'Catégories',
    defaultCategory: '(Aucun)',
    series: 'Séries',
    switchCategorySeries: 'Changer Catégorie / Séries',
    categoryValues: 'Valeurs de catégorie',
    seriesLabels: 'Étiquettes de séries',
    aggregate: 'Agrégat',
    xyValues: 'Valeurs X Y',
    paired: 'Mode apparié',
    axis: 'Axe',
    xAxis: 'Axe horizontal',
    yAxis: 'Axe vertical',
    polarAxis: 'Axe polaire',
    radiusAxis: 'Axe de rayon',
    navigator: 'Navigateur',
    zoom: 'Zoom',
    animation: 'Animation',
    crosshair: 'Réticule',
    color: 'Couleur',
    thickness: 'Épaisseur',
    preferredLength: 'Longueur préférée',
    xType: 'Type X',
    axisType: "Type d'axe",
    automatic: 'Automatique',
    category: 'Catégorie',
    number: 'Nombre',
    time: 'Temps',
    timeFormat: 'Format de temps',
    autoRotate: 'Rotation auto',
    labelRotation: 'Rotation',
    circle: 'Cercle',
    polygon: 'Polygone',
    square: 'Carré',
    cross: 'Croix',
    diamond: 'Diamant',
    plus: 'Plus',
    triangle: 'Triangle',
    heart: 'Cœur',
    orientation: 'Orientation',
    fixed: 'Fixé',
    parallel: 'Parallèle',
    perpendicular: 'Perpendiculaire',
    radiusAxisPosition: 'Position',
    ticks: 'Graduations',
    gridLines: 'Lignes de grille',
    width: 'Largeur',
    height: 'Hauteur',
    length: 'Longueur',
    padding: 'Rembourrage',
    spacing: 'Espacement',
    chartStyle: 'Style de graphique',
    title: 'Titre',
    chartTitles: 'Titres',
    chartTitle: 'Titre du graphique',
    chartSubtitle: 'Sous-titre',
    horizontalAxisTitle: "Titre de l'axe horizontal",
    verticalAxisTitle: "Titre de l'axe vertical",
    polarAxisTitle: "Titre de l'axe polaire",
    titlePlaceholder: 'Titre du graphique',
    background: 'Arrière-plan',
    font: 'Police',
    weight: 'Poids',
    top: 'Haut',
    right: 'Droite',
    bottom: 'Bas',
    left: 'Gauche',
    labels: 'Étiquettes',
    calloutLabels: "Étiquettes d'appel",
    sectorLabels: 'Étiquettes de secteur',
    positionRatio: 'Ratio de position',
    size: 'Taille',
    shape: 'Forme',
    minSize: 'Taille minimum',
    maxSize: 'Taille maximum',
    legend: 'Légende',
    position: 'Position',
    markerSize: 'Taille du marqueur',
    markerStroke: 'Contour du marqueur',
    markerPadding: 'Rembourrage du marqueur',
    itemSpacing: 'Espacement des éléments',
    itemPaddingX: "Rembourrage d'élément X",
    itemPaddingY: "Rembourrage d'élément Y",
    layoutHorizontalSpacing: 'Espacement horizontal',
    layoutVerticalSpacing: 'Espacement vertical',
    strokeWidth: 'Épaisseur du trait',
    offset: 'Décalage',
    offsets: 'Décalages',
    tooltips: 'Info-bulles',
    callout: 'Appel',
    markers: 'Marqueurs',
    shadow: 'Ombre',
    blur: 'Flou',
    xOffset: 'Décalage X',
    yOffset: 'Décalage Y',
    lineWidth: 'Épaisseur de la ligne',
    lineDash: 'Tirets de la ligne',
    lineDashOffset: 'Décalage des tirets',
    scrollingZoom: 'Défilement',
    scrollingStep: 'Étape de défilement',
    selectingZoom: 'Sélection',
    durationMillis: 'Durée (ms)',
    crosshairLabel: 'Étiquette',
    crosshairSnap: 'Accrocher au nœud',
    normal: 'Normal',
    bold: 'Gras',
    italic: 'Italique',
    boldItalic: 'Gras Italique',
    predefined: 'Prédéfini',
    fillOpacity: 'Opacité de remplissage',
    strokeColor: 'Couleur du trait',
    strokeOpacity: 'Opacité du trait',
    miniChart: 'Mini-Graphique',
    histogramBinCount: 'Nombre de bins',
    connectorLine: 'Ligne de connexion',
    seriesItems: 'Éléments de série',
    seriesItemType: "Type d'élément",
    seriesItemPositive: 'Positif',
    seriesItemNegative: 'Négatif',
    seriesItemLabels: "Étiquettes d'éléments",
    columnGroup: 'Colonne',
    barGroup: 'Barre',
    pieGroup: 'Camembert',
    lineGroup: 'Ligne',
    scatterGroup: 'X Y (Nuage de points)',
    areaGroup: 'Zone',
    polarGroup: 'Polaire',
    statisticalGroup: 'Statistique',
    hierarchicalGroup: 'Hiérarchique',
    specializedGroup: 'Spécialisé',
    combinationGroup: 'Combinaison',
    groupedColumnTooltip: 'Groupe',
    stackedColumnTooltip: 'Empilé',
    normalizedColumnTooltip: '100% Empilé',
    groupedBarTooltip: 'Groupe',
    stackedBarTooltip: 'Empilé',
    normalizedBarTooltip: '100% Empilé',
    pieTooltip: 'Camembert',
    donutTooltip: 'Donut',
    lineTooltip: 'Ligne',
    groupedAreaTooltip: 'Zone',
    stackedAreaTooltip: 'Empilé',
    normalizedAreaTooltip: '100% Empilé',
    scatterTooltip: 'Nuage de points',
    bubbleTooltip: 'Bulle',
    histogramTooltip: 'Histogramme',
    radialColumnTooltip: 'Colonne radiale',
    radialBarTooltip: 'Barre radiale',
    radarLineTooltip: 'Ligne radar',
    radarAreaTooltip: 'Zone radar',
    nightingaleTooltip: 'Nightingale',
    rangeBarTooltip: 'Barre de plage',
    rangeAreaTooltip: 'Zone de plage',
    boxPlotTooltip: 'Boîte à moustaches',
    treemapTooltip: 'Treemap',
    sunburstTooltip: 'Rayon de soleil',
    waterfallTooltip: "Chute d'eau",
    heatmapTooltip: 'Carte thermique',
    columnLineComboTooltip: 'Colonne & Ligne',
    areaColumnComboTooltip: 'Zone & Colonne',
    customComboTooltip: 'Combinaison Personnalisée',
    innerRadius: 'Rayon intérieur',
    startAngle: 'Angle de départ',
    endAngle: 'Angle de fin',
    reverseDirection: 'Inverser la direction',
    groupPadding: 'Rembourrage de groupe',
    seriesPadding: 'Rembourrage de séries',
    tile: 'Tuile',
    whisker: 'Moustache',
    cap: 'Capuchon',
    capLengthRatio: 'Ratio de longueur',
    labelPlacement: 'Placement',
    inside: "À l'intérieur",
    outside: "À l'extérieur",
    noDataToChart: 'Aucune donnée disponible à afficher.',
    pivotChartRequiresPivotMode: 'Le graphique croisé dynamique nécessite le mode croisé activé.',
    chartSettingsToolbarTooltip: 'Menu',
    chartLinkToolbarTooltip: 'Lié à la grille',
    chartUnlinkToolbarTooltip: 'Détaché de la grille',
    chartDownloadToolbarTooltip: 'Télécharger le graphique',
    chartMenuToolbarTooltip: 'Menu',
    chartEdit: 'Modifier le graphique',
    chartAdvancedSettings: 'Paramètres avancés',
    chartLink: 'Lier à la grille',
    chartUnlink: 'Détacher de la grille',
    chartDownload: 'Télécharger le graphique',
    histogramFrequency: 'Fréquence',
    seriesChartType: 'Type de graphique de séries',
    seriesType: 'Type de série',
    secondaryAxis: 'Axe secondaire',
    seriesAdd: 'Ajouter une série',
    categoryAdd: 'Ajouter une catégorie',
    bar: 'Barre',
    column: 'Colonne',
    histogram: 'Histogramme',
    advancedSettings: 'Paramètres avancés',
    direction: 'Direction',
    horizontal: 'Horizontal',
    vertical: 'Vertical',
    seriesGroupType: 'Type de groupe',
    groupedSeriesGroupType: 'Groupé',
    stackedSeriesGroupType: 'Empilé',
    normalizedSeriesGroupType: '100% Empilé',
    legendEnabled: 'Activé',
    invalidColor: 'La valeur de couleur est invalide',
    groupedColumnFull: 'Colonne groupée',
    stackedColumnFull: 'Colonne empilée',
    normalizedColumnFull: 'Colonne 100% empilée',
    groupedBarFull: 'Barre groupée',
    stackedBarFull: 'Barre empilée',
    normalizedBarFull: 'Barre 100% empilée',
    stackedAreaFull: 'Zone empilée',
    normalizedAreaFull: 'Zone 100% empilée',
    customCombo: 'Combinaison personnalisée',

    // ARIA
    ariaAdvancedFilterBuilderItem: '${variable}. Niveau ${variable}. Appuyez sur ENTER pour éditer.',
    ariaAdvancedFilterBuilderItemValidation:
        '${variable}. Niveau ${variable}. ${variable} Appuyez sur ENTER pour éditer.',
    ariaAdvancedFilterBuilderList: 'Liste de cadre de filtre avancé',
    ariaAdvancedFilterBuilderFilterItem: 'Condition de filtre',
    ariaAdvancedFilterBuilderGroupItem: 'Groupe de filtre',
    ariaAdvancedFilterBuilderColumn: 'Colonne',
    ariaAdvancedFilterBuilderOption: 'Option',
    ariaAdvancedFilterBuilderValueP: 'Valeur',
    ariaAdvancedFilterBuilderJoinOperator: 'Opérateur de jonction',
    ariaAdvancedFilterInput: 'Entrée de filtre avancé',
    ariaChecked: 'coché',
    ariaColumn: 'Colonne',
    ariaColumnGroup: 'Groupe de colonnes',
    ariaColumnFiltered: 'Colonne filtrée',
    ariaColumnSelectAll: 'Basculer la sélection de toutes les colonnes',
    ariaDateFilterInput: 'Entrée de filtre de date',
    ariaDefaultListName: 'Liste',
    ariaFilterColumnsInput: 'Entrée de filtre de colonnes',
    ariaFilterFromValue: 'Filtrer depuis la valeur',
    ariaFilterInput: 'Entrée de filtre',
    ariaFilterList: 'Liste de filtres',
    ariaFilterToValue: "Filtrer jusqu'à la valeur",
    ariaFilterValue: 'Valeur du filtre',
    ariaFilterMenuOpen: 'Ouvrir le menu de filtre',
    ariaFilteringOperator: 'Opérateur de filtrage',
    ariaHidden: 'caché',
    ariaIndeterminate: 'indéterminé',
    ariaInputEditor: "Éditeur d'entrée",
    ariaMenuColumn: 'Appuyez sur ALT BAS pour ouvrir le menu de colonne',
    ariaFilterColumn: 'Appuyez sur CTRL ENTER pour ouvrir le filtre',
    ariaRowDeselect: 'Appuyez sur ESPACE pour désélectionner cette ligne',
    ariaRowSelectAll: 'Appuyez sur ESPACE pour basculer la sélection de toutes les lignes',
    ariaRowToggleSelection: 'Appuyez sur ESPACE pour basculer la sélection de la ligne',
    ariaRowSelect: 'Appuyez sur ESPACE pour sélectionner cette ligne',
    ariaRowSelectionDisabled: 'La sélection de lignes est désactivée pour cette ligne',
    ariaSearch: 'Rechercher',
    ariaSortableColumn: 'Appuyez sur ENTER pour trier',
    ariaToggleVisibility: 'Appuyez sur ESPACE pour basculer la visibilité',
    ariaToggleCellValue: 'Appuyez sur ESPACE pour basculer la valeur de la cellule',
    ariaUnchecked: 'non coché',
    ariaVisible: 'visible',
    ariaSearchFilterValues: 'Rechercher les valeurs de filtre',
    ariaPageSizeSelectorLabel: 'Taille de page',
    ariaChartMenuClose: "Fermer le menu d'édition de graphique",
    ariaChartSelected: 'Sélectionné',
    ariaSkeletonCellLoadingFailed: 'Le chargement de la ligne a échoué',
    ariaSkeletonCellLoading: 'Les données de la ligne sont en cours de chargement',

    // ARIA Labels for Drop Zones
    ariaRowGroupDropZonePanelLabel: 'Groupes de lignes',
    ariaValuesDropZonePanelLabel: 'Valeurs',
    ariaPivotDropZonePanelLabel: 'Étiquettes de colonnes',
    ariaDropZoneColumnComponentDescription: 'Appuyez sur SUPPRIMER pour enlever',
    ariaDropZoneColumnValueItemDescription: "Appuyez sur ENTRÉE pour changer le type d'agrégation",
    ariaDropZoneColumnGroupItemDescription: 'Appuyez sur ENTRÉE pour trier',

    // used for aggregate drop zone, format: {aggregation}{ariaDropZoneColumnComponentAggFuncSeparator}{column name}
    ariaDropZoneColumnComponentAggFuncSeparator: ' de ',
    ariaDropZoneColumnComponentSortAscending: 'ascendant',
    ariaDropZoneColumnComponentSortDescending: 'descendant',
    ariaLabelDialog: 'Dialogue',
    ariaLabelColumnMenu: 'Menu de colonne',
    ariaLabelColumnFilter: 'Filtre de colonne',
    ariaLabelCellEditor: 'Éditeur de cellule',
    ariaLabelSelectField: 'Champ de sélection',

    // aria labels for rich select
    ariaLabelRichSelectField: 'Champ de sélection enrichie',
    ariaLabelRichSelectToggleSelection: 'Appuyez sur ESPACE pour basculer la sélection',
    ariaLabelRichSelectDeselectAllItems: 'Appuyez sur SUPPRIMER pour désélectionner tous les éléments',
    ariaLabelRichSelectDeleteSelection: "Appuyez sur SUPPRIMER pour désélectionner l'élément",
    ariaLabelTooltip: 'Info-bulle',
    ariaLabelContextMenu: 'Menu contextuel',
    ariaLabelSubMenu: 'Sous-menu',
    ariaLabelAggregationFunction: "Fonction d'agrégation",
    ariaLabelAdvancedFilterAutocomplete: 'Filtre avancé auto-complétion',
    ariaLabelAdvancedFilterBuilderAddField: 'Filtre avancé constructeur Ajouter un champ',
    ariaLabelAdvancedFilterBuilderColumnSelectField: 'Filtre avancé constructeur Sélectionnez le champ de colonne',
    ariaLabelAdvancedFilterBuilderOptionSelectField: "Filtre avancé constructeur Sélectionnez le champ d'option",
    ariaLabelAdvancedFilterBuilderJoinSelectField:
        "Filtre avancé constructeur Sélectionnez le champ de l'opérateur de jointure",

    // ARIA Labels for the Side Bar
    ariaColumnPanelList: 'Liste des colonnes',
    ariaFilterPanelList: 'Liste des filtres',

    // Number Format (Status Bar, Pagination Panel)
    thousandSeparator: ',',
    decimalSeparator: '.',

    // Data types
    true: 'Vrai',
    false: 'Faux',
    invalidDate: 'Date invalide',
    invalidNumber: 'Nombre invalide',
    january: 'Janvier',
    february: 'Février',
    march: 'Mars',
    april: 'Avril',
    may: 'Mai',
    june: 'Juin',
    july: 'Juillet',
    august: 'Août',
    september: 'Septembre',
    october: 'Octobre',
    november: 'Novembre',
    december: 'Décembre',

    // Time formats
    timeFormatSlashesDDMMYYYY: 'JJ/MM/AAAA',
    timeFormatSlashesMMDDYYYY: 'MM/JJ/AAAA',
    timeFormatSlashesDDMMYY: 'JJ/MM/AA',
    timeFormatSlashesMMDDYY: 'MM/JJ/AA',
    timeFormatDotsDDMYY: 'JJ.M.AA',
    timeFormatDotsMDDYY: 'M.JJ.AA',
    timeFormatDashesYYYYMMDD: 'AAAA-MM-JJ',
    timeFormatSpacesDDMMMMYYYY: 'JJ MMMM AAAA',
    timeFormatHHMMSS: 'HH:MM:SS',
    timeFormatHHMMSSAmPm: 'HH:MM:SS AM/PM',
};


===== ./routes/auth.js =====
const express = require('express');
const router = express.Router();
const bcrypt = require('bcrypt');
const db = require('../config/db');
const session = require('express-session');

router.get('/login', async (req, res) => {
  if (req.session && req.session.userId)
    return res.redirect('/propositions/add')
  res.render('auth/login');
});

router.get('/', async (req, res) => {
  if (req.session && req.session.userId)
    return res.redirect('/propositions/add')
  else
    return res.redirect('/auth/login')
});
router.post('/login', async (req, res) => {
  const { username, password } = req.body;

  try {
    const [[user]] = await db.query('SELECT * FROM users WHERE username = ?', [username]);

    if (!user || user.password !== password) {
      req.flash('error_msg', 'Login ou mot de passe invalid');
      return setTimeout(() => {
        res.redirect('/auth/login');
      }, 1000);
    }

    req.session.userId = user.id;
    req.session.isAdmin = user.is_admin;
    req.session.isJury = user.is_jury;
    req.session.username = user.username;
    res.redirect('/propositions/add');
  } catch (err) {
    req.flash('error', 'Erreur');
    res.redirect('/auth/login');
  }
});
router.get('/logout', (req, res) => {
  req.session.destroy(err => {
    if (err) {
      console.error(err);
      req.flash('error', 'Erreur');
      return res.redirect('/propositions/add');
    }
    res.redirect('/auth/login');
  });
});

const isAuthenticated = (req, res, next) => {
  if (req.session && req.session.userId) {
    return next();
  } else {
    res.redirect('/auth/login');
  }
};

module.exports = { router, isAuthenticated };


===== ./routes/charts.js =====
const express = require('express');
const router = express.Router();
const db = require('../config/db');

router.get('/stacked', async (req, res) => {
    try {
        const yearsResult = await db.query(`
            SELECT DISTINCT YEAR(date_emission) AS year
            FROM propositions
            ORDER BY year DESC;
        `);

        const years = yearsResult[0]?.map(row => row.year) || [];
        const monthsByYear = {};

        for (const year of years) {
            const monthsResult = await db.query(`
                SELECT DISTINCT MONTH(date_emission) AS month
                FROM propositions
                WHERE YEAR(date_emission) = ?
                ORDER BY month;
            `, [year]);

            monthsByYear[year] = monthsResult[0]?.map(row => row.month) || [];
        }

        res.render('layouts/main', {
            username: req.session.username,
            userId: req.session.userId,
            isAdmin: req.session.isAdmin,
            isJury: req.session.isJury,
            years: years,
            monthsByYear: monthsByYear,
            defaultYear: years[0] || null,
            title: 'Propositions Chart',
            css: ['stacked.css', 'chartnav.css'],
            js: ['stacked.js'],
            modules: ['chart.js'],
            view: '../admin/charts/stacked',
        });
    } catch (err) {
        console.error(err);
        res.status(500).send('Error fetching data');
    }
});

router.get('/stacked-data', async (req, res) => {
    const { year } = req.query;

    try {
        const data = await db.query(`
            SELECT u.username, MONTH(p.date_emission) AS month, COUNT(*) AS proposition_count
            FROM propositions p
            JOIN users u ON p.user_id = u.id
            WHERE YEAR(p.date_emission) = ?
            GROUP BY u.username, month
            ORDER BY u.username, month;
        `, [year]);

        if (!data[0] || data[0].length === 0) {
            return res.status(404).send('No data found for the selected year');
        }

        const formattedData = data[0].reduce((acc, row) => {
            if (!acc[row.username]) acc[row.username] = {};
            acc[row.username][row.month - 1] = row.proposition_count;
            return acc;
        }, {});

        res.json(formattedData);
    } catch (err) {
        console.error(err);
        res.status(500).send('Error fetching data');
    }
});
router.get('/pie', async (req, res) => {
    try {
        const yearsResult = await db.query(`
            SELECT DISTINCT YEAR(date_emission) AS year
            FROM propositions
            ORDER BY year DESC;
        `);

        const years = yearsResult[0]?.map(row => row.year) || [];

        res.render('layouts/main', {
            username: req.session.username,
            userId: req.session.userId,
            isAdmin: req.session.isAdmin,
            isJury: req.session.isJury,
            years: years,
            title: 'Propositions Pie Chart',
            css: ['pie-chart.css', 'chartnav.css'],
            js: ['pie-chart.js'],
            modules: ['chart.js'],
            view: '../admin/charts/pie',
        });
    } catch (err) {
        console.error(err);
        res.status(500).send('Error fetching years');
    }
});

router.get('/pie-chart-data', async (req, res) => {
    const { years, months } = req.query;

    try {
        const monthYearConditions = months.split(',').map(monthYear => {
            const [month, year] = monthYear.split('-');
            return `(MONTH(date_emission) = ${parseInt(month, 10)} AND YEAR(date_emission) = ${parseInt(year, 10)})`;
        }).join(' OR ');

        const query = `
            SELECT
                MONTH(date_emission) AS month,
                YEAR(date_emission) AS year,
                COUNT(CASE WHEN statut = 'soldee' THEN 1 END) AS nb_propositions_retenu,
                COUNT(CASE WHEN statut = 'en cours' THEN 1 END) AS nb_propositions_en_cours,
                COUNT(*) AS total
            FROM propositions
            WHERE ${monthYearConditions}
            GROUP BY year, month
            ORDER BY year DESC, month ASC;
        `;

        const data = await db.query(query);

        const formattedData = data[0].map(row => ({
            month: `${row.month}-${String(row.year).slice(-2)}`,
            nb_propositions_retenu: row.nb_propositions_retenu,
            nb_propositions_en_cours: row.nb_propositions_en_cours,
            total: row.total,
        }));

        res.json(formattedData);
    } catch (err) {
        console.error(err);
        res.status(500).send('Error fetching data');
    }
});


router.get('/years', async (req, res) => {
    try {
        const yearsResult = await db.query(`
            SELECT DISTINCT YEAR(date_emission) AS year
            FROM propositions
            ORDER BY year DESC;
        `);
        const years = yearsResult[0]?.map(row => row.year) || [];
        res.json(years);
    } catch (err) {
        console.error(err);
        res.status(500).send('Error fetching years');
    }
});

router.get('/months', async (req, res) => {
    const { years } = req.query;
    try {
        const yearsArray = years.split(',');
        const placeholders = yearsArray.map(() => '?').join(', ');

        const query = `
            SELECT DISTINCT
                MONTH(date_emission) AS month,
                YEAR(date_emission) AS year
            FROM propositions
            WHERE YEAR(date_emission) IN (${placeholders})
            ORDER BY year DESC, month ASC;
        `;

        const monthsResult = await db.query(query, yearsArray);

        const formattedMonths = monthsResult[0].map(row => ({
            month: row.month,
            year: row.year,
        }));

        res.json(formattedMonths);
    } catch (err) {
        console.error(err);
        res.status(500).send('Error fetching months');
    }
});
router.get('/cumul', async (req, res) => {
    try {
        res.render('layouts/main', {
            username: req.session.username,
            userId: req.session.userId,
            isAdmin: req.session.isAdmin,
            isJury: req.session.isJury,
            title: 'Cumul des Idées Émises',
            css: ['cumul.css', 'chartnav.css'],
            js: ['cumul.js'],
            modules: ['chart.js'],
            view: '../admin/charts/cumul',
        });
    } catch (err) {
        console.error(err);
        res.status(500).send('Error rendering page');
    }
});


router.get('/cumul-data', async (req, res) => {
    const { startMonth, endMonth } = req.query;

    const [startYear, startMonthNum] = startMonth.split('-');
    const [endYear, endMonthNum] = endMonth.split('-');

    try {
        const query = `
            SELECT
                YEAR(date_emission) AS year,
                MONTH(date_emission) AS month,
                COUNT(*) AS cumul_idee_emises  -- Count all propositions
            FROM propositions
            WHERE DATE_FORMAT(date_emission, '%Y-%m') BETWEEN ? AND ?
            GROUP BY year, month
            ORDER BY year DESC, month ASC;
        `;

        const data = await db.query(query, [`${startYear}-${startMonthNum}`, `${endYear}-${endMonthNum}`]);

        const formattedData = data[0].map(row => ({
            month: row.month,
            year: row.year,
            cumul_idee_emises: row.cumul_idee_emises
        }));

        res.json(formattedData);
    } catch (err) {
        console.error(err);
        res.status(500).send('Error fetching cumulative data');
    }
});

module.exports = router;

===== ./routes/functions.js =====
const express = require('express');
const router = express.Router();
const db = require('../config/db');

router.get('/', async (req, res) => {
  if (!req.session.isAdmin) {
    return res.redirect(`/propositions/mes-propositions`);
  }
  try {
    const [rows] = await db.query('SELECT * FROM functions');
    res.render('layouts/main', {
      username: req.session.username,
      userId: req.session.userId,
      isAdmin: req.session.isAdmin,
      isJury: req.session.isJury,
      title: 'Fonctions',
      functions: rows,
      view: '../functions/list',
      css: ['functionList.css'],
      js: ['functionList.js', 'sweet-alert.js']
    });
  } catch (error) {
    res.status(500).json({ error: 'Failed to retrieve functions' });
  }
});

router.put('/edit/:id', async (req, res) => {
  
  if (!req.session.isAdmin) {
    return res.redirect(`/propositions/mes-propositions`);
  }
  const { id } = req.params;
  const { name } = req.body;

  if (!name) {
    return res.status(400).json({ error: 'Le nom de la fonction est requis.' });
  }

  try {
    const [result] = await db.query('UPDATE functions SET name = ? WHERE id = ?', [name, id]);

    if (result.affectedRows === 0) {
      return res.status(404).json({ error: 'Fonction non trouvée.' });
    }

    res.status(200).json({ message: 'Fonction modifiée avec succès.' });
  } catch (error) {
    res.status(500).json({ error: 'Échec de la modification de la fonction.' });
  }
});

router.delete('/delete/:id', async (req, res) => {
  
  if (!req.session.isAdmin) {
    return res.redirect(`/propositions/mes-propositions`);
  }
  const { id } = req.params;

  try {
    const [result] = await db.query('DELETE FROM functions WHERE id = ?', [id]);

    if (result.affectedRows === 0) {
      return res.status(404).json({ error: 'Fonction non trouvée.' });
    }

    res.json({ message: 'Fonction supprimée avec succès.' });
  } catch (error) {
    res.status(500).json({ error: 'Échec de la suppression de la fonction.' });
  }
});

router.post('/', async (req, res) => {
  console.log('add');
  
  const { name } = req.body;
  if (!name) {
    return res.status(400).json({ error: 'Le nom de la fonction est requis.' });
  }

  try {
    await db.query('INSERT INTO functions (name) VALUES (?)', [name]);
    res.json({ message: 'Fonction ajoutée avec succès.' });
  } catch (error) {
    res.status(500).json({ error: 'Erreur lors de l\'ajout de la fonction.' });
  }
});

module.exports = router;

===== ./routes/images.js =====
const express = require('express');
const router = express.Router();
const db = require('../config/db');
const upload = require('../config/uploadConfig');
const path = require('path');
const fs = require('fs');
const multer = require('multer');

router.get('/:propositionId/:type/:filename', (req, res) => {
    const { propositionId, type, filename } = req.params;
    const filePath = path.join(__dirname, '../uploads/private/propositions', `proposition_${propositionId}`, type, filename);

    if (fs.existsSync(filePath)) {
        res.sendFile(filePath);
    } else {
        res.status(404).json({ success: false, message: 'File not found.' });
    }
});

router.get('/profile-image/:userId', async (req, res) => {
    const { userId } = req.params;
    const p = req.query.p;

    try {
        const filePath = path.join(__dirname, '../uploads/private/profile_images', `profileimg-${userId}.jpg`);

        if (fs.existsSync(filePath)) {
            return res.sendFile(filePath);
        }

        if (p == 1) {
            return res.status(404).json({ success: false, message: 'Image non trouvée.' });
        }

        return res.sendFile(path.join(__dirname, '../public/images/nopf.jpg'));
    } catch (error) {
        console.error(`Erreur lors de la récupération de l'image de profil : ${error.message}`);
        res.status(500).json({ success: false, message: 'Erreur interne du serveur.' });
    }
});

router.delete('/profile-image/delete/:userId', async (req, res) => {
    const { userId } = req.params;

    try {
        const filePath = path.join(__dirname, '../uploads/private/profile_images', `profileimg-${userId}.jpg`);

        if (fs.existsSync(filePath)) {
            
            fs.unlinkSync(filePath);
            return res.status(200).json({ success: true, message: 'Image supprimée avec succès.' });
        }

        res.status(404).json({ success: false, message: 'Image non trouvée.' });
    } catch (error) {
        console.error(`Erreur lors de la suppression de l'image de profil : ${error.message}`);
        res.status(500).json({ success: false, message: 'Erreur interne du serveur.' });
    }
});

router.post('/upload/:propositionId', (req, res) => {
    upload.fields([
        { name: 'beforeImages', maxCount: 1 },
        { name: 'afterImages', maxCount: 1 }
    ])(req, res, async (err) => {
        const propositionId = req.params.propositionId;

        if (err instanceof multer.MulterError) {
            if (err.code === 'LIMIT_FILE_SIZE') {
                return res.status(400).json({ error: 'La taille du fichier est trop grande. La taille maximale est de 5 Mo.' });
            }
            return res.status(400).json({ error: 'Erreur du serveur lors du téléchargement du fichier.' });
        }

        else if (err) {
            return res.status(400).json({ error: err.message });
        }

        if (!req.files.beforeImages && !req.files.afterImages) {
            return res.status(400).json({ error: 'Aucune image n\'a été téléchargée.' });
        }

        try {
            const uploadedFiles = [];

            if (req.files.beforeImages) {
                for (const file of req.files.beforeImages) {
                    const [result] = await db.query(
                        'INSERT INTO images (proposition_id, type, filename, file_size, original_name) VALUES (?, ?, ?, ?, ?)',
                        [propositionId, 'before', file.filename, file.size, file.originalname]
                    );
                    uploadedFiles.push({ fileId: result.insertId, fileName: file.filename, size: file.size });
                }
            }

            if (req.files.afterImages) {
                for (const file of req.files.afterImages) {
                    const [result] = await db.query(
                        'INSERT INTO images (proposition_id, type, filename, file_size, original_name) VALUES (?, ?, ?, ?, ?)',
                        [propositionId, 'after', file.filename, file.size, file.originalname]
                    );
                    uploadedFiles.push({ fileId: result.insertId, fileName: file.filename, size: file.size });
                }
            }

            res.json({ success: true, uploadedFiles });

        } catch (error) {
            console.error(`Erreur lors de l'insertion des images : ${error.message}`);
            res.status(500).json({ error: 'Erreur de la base de données lors de l\'enregistrement des images.' });
        }
    });
});

router.delete('/delete/:id', async (req, res) => {
    const imageId = req.params.id;

    try {
        const [image] = await db.query('SELECT * FROM images WHERE id = ?', [imageId]);
        if (image.length === 0) {
            return res.status(404).json({ success: false, message: 'Image not found.' });
        }

        const filePath = path.join(__dirname, '../uploads/private', `proposition_${image[0].proposition_id}`, image[0].type, image[0].filename);
        if (fs.existsSync(filePath)) {
            fs.unlinkSync(filePath);
        }

        await db.query('DELETE FROM images WHERE id = ?', [imageId]);

        res.json({ success: true, message: 'Image deleted successfully.' });
    } catch (error) {
        console.error(`Error deleting image: ${error.message}`);
        res.status(500).json({ success: false, message: 'An error occurred while deleting the image.' });
    }
});

router.get('/proposition/:id', async (req, res) => {
    const propositionId = req.params.id;
    const imageType = req.query.type;

    try {
        const [images] = await db.query(
            `SELECT * FROM images WHERE proposition_id = ? AND type = ?`,
            [propositionId, imageType]
        );
        res.json({ success: true, images });
    } catch (error) {
        console.error(`Error fetching images: ${error.message}`);
        res.status(500).json({ success: false, message: 'Internal Server Error' });
    }
});

router.post('/upload-profile-image/:userId', upload.single('profileImage'), async (req, res) => {
    const file = req.file;

    if (!file) {
        return res.status(400).json({ error: 'Aucune image n\'a été téléchargée.' });
    }
    res.json({ success: true, message: 'Image de profil mise à jour avec succès.' });
});

module.exports = router;

===== ./routes/propositions.js =====
const express = require('express');
const router = express.Router();
const db = require('../config/db');
const upload = require('../config/uploadConfig');

router.get('/', async (req, res) => {
  if (!req.session.isAdmin) {
    return res.redirect(`/propositions/mes-propositions`);
  }

  try {
    // This single, powerful query performs the entire logic in the database.
    const [propositions] = await db.query(`
      SELECT 
        p.id, p.display_id, p.objet, p.statut, p.date_emission,
        CONCAT(u.first_name, ' ', COALESCE(u.last_name, '')) AS utilisateur,

        -- This CASE statement implements the display logic directly in the query.
        CASE
          -- Step 1: Check if the proposition exists in any ENDED session.
          WHEN EXISTS (
            SELECT 1 
            FROM proposition_status ps
            JOIN voting_sessions vs ON ps.voting_session_id = vs.id
            WHERE ps.proposition_id = p.id AND vs.ended = 1
          ) 
          -- If YES, then proceed to Step 2: Check the 'retenu' field.
          THEN 
            CASE 
              WHEN p.retenu = 1 THEN 'Retenu'
              WHEN p.retenu = 0 THEN 'Non Retenu'
              -- Fallback for an unlikely edge case
              ELSE 'Non Retenu' 
            END
          -- If NO (it has not been in an ended session), it is 'En attente'.
          ELSE 'En attente'
        END AS selection_status

      FROM 
        propositions p
      JOIN 
        users u ON p.user_id = u.id
      ORDER BY 
        p.id DESC
    `);

    res.render('layouts/main', {
      username: req.session.username,
      userId: req.session.userId,
      isAdmin: req.session.isAdmin,
      isJury: req.session.isJury,
      title: 'Propositions',
      propositions: propositions,
      hasPropositions: propositions.length > 0,
      css: ["tables.css"],
      js: ["ag-grid.js"],
      view: '../admin/propositions/list'
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Erreur' });
  }
});

router.get('/mes-propositions', async (req, res) => {
  try {
    const [results] = await db.query('SELECT * FROM propositions WHERE user_id = ?', [req.session.userId]);

    res.render('layouts/main', {
      username: req.session.username,
      userId: req.session.userId,
      isAdmin: req.session.isAdmin,
      isJury: req.session.isJury,
      title: 'Mes Propositions',
      propositions: results,
      hasPropositions: results.length > 0,
      css: ["tables.css"],
      js: ["ag-grid.js", "mespropositions.js"],
      view: '../users/mespropositions'
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Erreur' });
  }
});

router.get('/add/:userId?', async (req, res) => {
  const { userId } = req.params;
  const targetUserId = req.session.isAdmin && userId ? userId : req.session.userId;

  let targetUsername = null;

  try {
    if (targetUserId !== req.session.userId) {
      const [rows] = await db.query('SELECT username FROM users WHERE id = ?', [targetUserId]);

      if (rows.length > 0) {
        targetUsername = rows[0].username;
      } else {
        return res.status(404).send('Utilisateur non trouve');
      }
    }

    res.render('layouts/main', {
      username: req.session.username,
      userId: req.session.userId,
      isAdmin: req.session.isAdmin,
      isJury: req.session.isJury,
      title: 'Ajouter Proposition',
      view: '../users/propositionForm',
      css: ['propositionForm.css'],
      js: ['propositionForm.js', 'sweet-alert.js'],
      targetUserId: targetUserId,
      targetUsername: targetUsername,
    });
  } catch (error) {
    console.error(error.message);
    res.status(500).send('Erreur');
  }
});

router.post('/add', upload.none(), async (req, res) => {
  const {
    objet,
    description_situation_actuelle,
    description_amelioration_proposee,
    impact_economique,
    impact_technique,
    impact_formation,
    impact_fonctionnement,
    statut,
    target_user_id
  } = req.body;

  const user_id = req.session.isAdmin && target_user_id ? target_user_id : req.session.userId;

  try {
    const [result] = await db.query(
      `INSERT INTO propositions 
        (objet, description_situation_actuelle, description_amelioration_proposee, user_id, impact_economique, impact_technique, impact_formation, impact_fonctionnement, statut) 
      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
      [
        objet,
        description_situation_actuelle,
        description_amelioration_proposee,
        user_id,
        impact_economique || 0,
        impact_technique || 0,
        impact_formation || 0,
        impact_fonctionnement || 0,
        statut || 'non soldee'
      ]
    );

    res.json({ success: true, propositionId: result.insertId });
  } catch (error) {
    console.log(error.message);
    res.status(500).json({ success: false, message: error.message });
  }
});


router.get('/proposition/:id', async (req, res) => {
  const propositionId = req.params.id;

  try {
    const [propositionResult] = await db.query(
      `SELECT * FROM propositions WHERE id = ?`,
      [propositionId]
    );

    if (!propositionResult || propositionResult.length === 0) {
        return res.status(404).send("Proposition not found");
    }
    const proposition = propositionResult[0];

    const [images] = await db.query(
      `SELECT * FROM images WHERE proposition_id = ?`,
      [propositionId]
    );

    const beforeImages = images.filter(img => img.type === 'before');
    const afterImages = images.filter(img => img.type === 'after');

    res.render('layouts/main', {
      username: req.session.username,
      userId: req.session.userId,
      isAdmin: req.session.isAdmin,
      isJury: req.session.isJury,
      title: proposition.objet,
      proposition: proposition,
      beforeImages,
      afterImages,
      css: ['detailProposition.css'],
      js: ['detailProposition.js', 'sweet-alert.js'],
      view: '../users/detailProposition'
    });
  } catch (error) {
    console.error(`Error fetching proposition: ${error.message}`);
    res.status(500).send('Internal Server Error');
  }
});

router.get('/proposition/edit/:id', async (req, res) => {
  const propositionId = req.params.id;

  try {
    const [propositionResult] = await db.query(
      `SELECT * FROM propositions WHERE id = ?`,
      [propositionId]
    );

    if (!propositionResult || propositionResult.length === 0) {
      return res.status(404).send('Proposition not found');
    }
    const proposition = propositionResult[0];

    res.render('layouts/main', {
      username: req.session.username,
      userId: req.session.userId,
      isAdmin: req.session.isAdmin,
      isJury: req.session.isJury,
      title: `Edit Proposition - ${proposition.objet}`,
      proposition: proposition,
      css: ['propositionForm.css'],
      js: ['propositionFormUpdate.js', 'sweet-alert.js'],
      view: '../users/modifierProposition'
    });
  } catch (error) {
    console.error(`Error fetching proposition for edit: ${error.message}`);
    res.status(500).send('Internal Server Error');
  }
});

router.post('/update/:id', upload.none(), async (req, res) => {
  const propositionId = req.params.id;
  const { objet, description_situation_actuelle, description_amelioration_proposee, impact_economique, impact_fonctionnement, impact_formation, impact_technique, statut } = req.body;

  try {
    await db.query(
      `UPDATE propositions 
       SET objet = ?, description_situation_actuelle = ?, description_amelioration_proposee = ?, impact_economique = ?, impact_fonctionnement = ?, impact_formation = ?, impact_technique = ? ,statut = ?
       WHERE id = ?`,
      [objet, description_situation_actuelle, description_amelioration_proposee,
        impact_economique || 0,
        impact_technique || 0,
        impact_formation || 0,
        impact_fonctionnement || 0,
        statut, propositionId]
    );

    res.json({ success: true, propositionId: propositionId });
  } catch (error) {
    console.error(`Error updating proposition: ${error.message}`);
    res.status(500).send('Internal Server Error');
  }
});

router.delete('/:id/delete', async (req, res) => {
  if (!req.session.isAdmin) {
    return res.status(403).send('Forbidden');
  }
  try {
    const [result] = await db.query('DELETE FROM propositions WHERE id = ?', [req.params.id]);

    if (result.affectedRows === 0) {
      return res.status(404).json({ success: false, message: 'Proposition not found' });
    }

    res.json({ success: true });
  } catch (error) {
    console.error(error);
    res.status(500).json({ success: false, message: 'Server Error' });
  }
});

module.exports = router;

===== ./routes/users.js =====
const express = require('express');
const router = express.Router();
const bcrypt = require('bcrypt');
const db = require('../config/db');
const session = require('express-session');

router.get('/add', async (req, res) => {
  if (!req.session.isAdmin) {
    return res.redirect(`/propositions/mes-propositions`);
  }
  try {
    const [functions] = await db.query('SELECT * FROM functions');
    res.render('layouts/main', {
      username: req.session.username,
      userId: req.session.userId,
      isAdmin: req.session.isAdmin,
      isJury: req.session.isJury,

      title: 'ajouter utilisateur',
      css: ['addUser.css'],
      js: [],
      view: '../admin/users/addUser',
      functions: functions
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'An error occurred while rendering the add user page.' });
  }
});

router.post('/add', async (req, res) => {
  if (!req.session.isAdmin) {
    return res.redirect(`/propositions/mes-propositions`);
  }
  const { username, password, first_name, last_name, function_id, is_admin, is_jury } = req.body;
  try {
    const [results] = await db.query('SELECT * FROM users WHERE username = ?', [username]);
    if (results.length > 0) {
      req.flash('error_msg', 'Username already exists');
      return res.redirect('/users/add');
    }

    await db.query(
      'INSERT INTO users (username, password, first_name, last_name, function_id, is_admin, is_jury) VALUES (?, ?, ?, ?, ?, ?, ?)',
      [username, password, first_name, last_name, function_id, is_admin ? 1 : 0, is_jury ? 1 : 0]
    );

    req.flash('success_msg', 'User added');
    return res.redirect('/users/add');
  } catch (err) {
    console.log(err);
    req.flash('error_msg', 'An error occurred');
    return res.redirect('/users/add');
  }
});

router.get('/', async (req, res) => {
  if (!req.session.isAdmin) {
    return res.redirect(`/propositions/mes-propositions`);
  }
  try {
    const [users] = await db.query(`
      SELECT u.id, u.username, u.first_name, u.last_name, f.name AS function_name, u.is_admin, u.is_jury
      FROM users u
      LEFT JOIN functions f ON u.function_id = f.id
    `);

    res.render('layouts/main', {
      username: req.session.username,
      userId: req.session.userId,
      isAdmin: req.session.isAdmin,
      isJury: req.session.isJury,
      title: 'Liste des Utilisateurs',
      css: ['listUsers.css'],
      js: [],
      view: '../admin/users/listUsers',
      users: users
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'An error occurred while fetching the user list' });
  }
});

router.get('/edit/:id', async (req, res) => {
  if (!req.session.isAdmin) {
    return res.redirect(`/propositions/mes-propositions`);
  }
  const userId = parseInt(req.params.id, 10);
  if (isNaN(userId)) {
    return res.status(400).json({ error: 'Invalid user ID' });
  }

  try {
    const [results] = await db.query('SELECT * FROM users WHERE id = ?', [userId]);
    if (results.length === 0) {
      return res.status(404).json({ error: 'User not found' });
    }

    const [functions] = await db.query('SELECT * FROM functions');

    res.render('layouts/main', {
      username: req.session.username,
      userId: req.session.userId,
      isAdmin: req.session.isAdmin,
      isJury: req.session.isJury,

      userId: req.session.userId,
      isAdmin: req.session.isAdmin,
      isJury: req.session.isJury,

      title: 'Modifier utilisateur',
      view: '../admin/users/editUser',
      css: ['editUser.css', "dropzone.css"],
      js: ["dropzone.js", "editUser.js", "compressor.js"],
      user: results[0],
      functions: functions
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'An error occurred' });
  }
});

router.post('/edit/:id', async (req, res) => {
  if (!req.session.isAdmin) {
    return res.redirect(`/propositions/mes-propositions`);
  }
  const userId = parseInt(req.params.id, 10);
  const { username, password, first_name, last_name, function_id, is_admin, is_jury } = req.body;

  if (isNaN(userId)) {
    req.flash('error', 'ID d\'utilisateur invalide');
    return res.redirect(`/users/edit/${userId}`);
  }

  try {
    const [existingUser] = await db.query('SELECT * FROM users WHERE username = ? AND id != ?', [username, userId]);
    if (existingUser.length > 0) {
      req.flash('error_msg', 'Le nom d\'utilisateur existe déjà');
      return res.redirect(`/users/edit/${userId}`);
    }

    let updateFields = [
      'username = ?',
      'first_name = ?',
      'last_name = ?',
      'function_id = ?',
      'is_admin = ?',
      'is_jury = ?'
    ];
    let updateValues = [username, first_name, last_name, function_id, is_admin ? 1 : 0, is_jury ? 1 : 0];

    if (password) {
      updateFields.push('password = ?');
      updateValues.push(password); // Store plain text password directly
    }

    const sql = `UPDATE users SET ${updateFields.join(', ')} WHERE id = ?`;
    updateValues.push(userId);

    await db.query(sql, updateValues);

    res.redirect(`/users/`);
  } catch (err) {
    console.error(err);
    req.flash('error', 'Une erreur est survenue');
    res.redirect(`/users/edit/${userId}`);
  }
});

router.post('/delete/:id', async (req, res) => {
  if (!req.session.isAdmin) {
    return res.redirect(`/propositions/mes-propositions`);
  }
  const userId = req.params.id;
  try {
    await db.query('DELETE FROM users WHERE id = ?', [userId]);
    req.flash('success', 'User deleted');
    return res.redirect('/users');
  } catch (err) {
    console.error(err);
    req.flash('error', 'An error occurred');
    return res.redirect('/users');
  }
});

module.exports = router;


===== ./routes/votes.js =====
const express = require('express');
const router = express.Router();
const db = require('../config/db');
const upload = require('../config/uploadConfig');
const { render } = require('ejs');


router.post('/init', async (req, res) => {
    const { type } = req.body;

    if (!req.session.isAdmin) {
        return res.status(403).json({ error: 'Non autorisé' });
    }

    if (!['jury', 'global'].includes(type)) {
        return res.status(400).json({ error: 'Type de session de vote invalide' });
    }

    const connection = await db.getConnection();

    try {
        await connection.beginTransaction();

        const [activeSession] = await connection.query('SELECT * FROM voting_sessions WHERE is_active = 1');

        if (activeSession.length > 0) {
            await connection.rollback();
            return res.status(400).json({ message: 'Il y a déjà une session de vote en cours' });
        }

        let propositionsQuery = `
            SELECT p.*
            FROM propositions p
            LEFT JOIN proposition_status ps ON p.id = ps.proposition_id
            WHERE 1=1
        `;

        if (type === 'global') {
            propositionsQuery += `
                AND p.retenu = 1
                AND p.statut = 'soldee'
                AND p.id NOT IN (
                    SELECT ps.proposition_id
                    FROM proposition_status ps
                    JOIN voting_sessions vs ON ps.voting_session_id = vs.id
                    WHERE vs.type = 'global'
                )
            `;
        }

        if (type === 'jury') {
            propositionsQuery += `
                AND p.id NOT IN (
                    SELECT ps.proposition_id
                    FROM proposition_status ps
                )
                AND p.statut != 'annulee'
            `;
        }

        const [propositions] = await connection.query(propositionsQuery);

        if (propositions.length === 0) {
            await connection.rollback();
            return res.status(400).json({ message: 'Aucune proposition disponible pour le vote' });
        }

        await connection.query('UPDATE propositions SET locked = 1 WHERE id IN (?)', [
            propositions.map(p => p.id),
        ]);

        const [result] = await connection.query(
            'INSERT INTO voting_sessions (type, init_time, is_active) VALUES (?, NOW(), 1)',
            [type]
        );

        const statusInsertPromises = propositions.map(p => {
            return connection.query('INSERT INTO proposition_status (proposition_id, voting_session_id) VALUES (?, ?)', [p.id, result.insertId]);
        });

        await Promise.all(statusInsertPromises);

        await connection.commit();

        res.status(201).json({
            success: true,
            message: 'Session de vote initialisée',
            sessionId: result.insertId,
            propositions,
        });
    } catch (error) {
        await connection.rollback();
        console.log(error);
        res.status(500).json({ error: 'Erreur de base de données', details: error });
    } finally {
        connection.release();
    }
});

router.post('/:sessionId/start', async (req, res) => {
    const { sessionId } = req.params;

    if (!req.session.isAdmin) {
        return res.status(403).json({ error: 'Unauthorized' });
    }

    try {
        const [sessionResult] = await db.query('UPDATE voting_sessions SET started = 1 WHERE id = ?', [sessionId]);

        if (sessionResult.affectedRows === 0) {
            return res.status(404).json({ message: 'Voting session not found' });
        }

        res.status(200).json({ success: true, message: 'Voting session started, jury can vote now' });
    } catch (error) {
        res.status(500).json({ error: 'Database error', details: error });
    }
});

router.post('/:sessionId/end', async (req, res) => {
    const { sessionId } = req.params;

    if (!req.session.isAdmin) {
        return res.status(403).json({ error: 'Unauthorized' });
    }
    const connection = await db.getConnection();
    try {
        await connection.beginTransaction();

        const [sessionResult] = await connection.query('UPDATE voting_sessions SET is_active = 0, ended = 1, end_time = NOW() WHERE id = ?', [sessionId]);
        if (sessionResult.affectedRows === 0) {
            await connection.rollback();
            return res.status(404).json({ message: 'Voting session not found' });
        }
        
        const [[session]] = await connection.query('SELECT type FROM voting_sessions WHERE id = ?', [sessionId]);
        
        let validatedPropositions = [];

        if (session.type === 'jury') {
            // CORRECTED LOGIC: Retained if more than 50% of jurors voted "Oui"
            const [propositions] = await connection.query(
                `SELECT p.id, p.display_id, p.objet
                 FROM propositions p
                 JOIN votes v ON p.id = v.proposition_id
                 WHERE v.session_id = ?
                 GROUP BY p.id, p.display_id, p.objet
                 HAVING (SUM(CASE WHEN v.vote_value = 6 THEN 1 ELSE 0 END) / COUNT(v.user_id)) > 0.5`,
                [sessionId]
            );
            
            if (propositions.length > 0) {
                const propositionIds = propositions.map(p => p.id);
                await connection.query('UPDATE propositions SET retenu = 1 WHERE id IN (?)', [propositionIds]);
            }
            validatedPropositions = propositions;

        } else if (session.type === 'global') {
            // Logic for global vote: use average grade (remains unchanged)
             const [propositions] = await connection.query(
                `SELECT p.id, p.display_id, p.objet, AVG(v.vote_value) as avg_grade
                 FROM propositions p
                 JOIN votes v ON p.id = v.proposition_id
                 WHERE v.session_id = ?
                 GROUP BY p.id, p.display_id, p.objet
                 HAVING avg_grade > 2.5`,
                [sessionId]
            );

            if (propositions.length > 0) {
                 await connection.query('UPDATE propositions SET retenu = 1 WHERE id IN (?)', [
                    propositions.map((p) => p.id),
                ]);
            }
            validatedPropositions = propositions;
        }

        await connection.commit();
        res.json({
            message: 'Voting session closed',
            validatedPropositions,
        });

    } catch (error) {
        await connection.rollback();
        console.error("Error ending session:", error);
        res.status(500).json({ error: 'Database error', details: error });
    } finally {
        connection.release();
    }
});

router.get('/', async (req, res) => {
    if (!req.session.isAdmin  && !req.session.isJury) {
        return res.status(403).json({ error: 'Unauthorized' });
    }
    const sessions = await db.query('SELECT * FROM voting_sessions');

    res.render('layouts/main', {
        username: req.session.username, userId: req.session.userId,
        isAdmin: req.session.isAdmin,
        isJury: req.session.isJury,
        sessions: sessions[0],
        title: 'SESSIONS',
        view: '../voting-sessions/list',
        css: ['tables.css'],
        js: ['ag-grid.js', 'sweet-alert.js']
    });
});

router.delete('/:sessionId', async (req, res) => {
    if (!req.session.isAdmin) {
        return res.status(403).json({ error: 'Unauthorized' });
    }
    try {
        const [session] = await db.query('SELECT * FROM voting_sessions WHERE id = ?', [req.params.sessionId]);
        if (session.length === 0) {
            return res.status(404).json({ message: 'Session not found' });
        }

        const [lastSession] = await db.query('SELECT * FROM voting_sessions ORDER BY id DESC LIMIT 1');
        if (lastSession.length === 0 || lastSession[0].id !== session[0].id) {
            return res.status(400).json({ error: 'error', message: 'Only the last created voting session can be deleted' });
        }

        await db.query('DELETE FROM voting_sessions WHERE id = ?', [req.params.sessionId]);

        res.json({ message: 'Session deleted successfully' });
    } catch (error) {
        res.status(500).json({ error: 'Database error', details: error });
    }
});

router.get('/current-proposition-id', async (req, res) => {
    try {
        const [proposition] = await db.query(`
            SELECT ps.proposition_id
            FROM proposition_status ps
            JOIN voting_sessions vs ON ps.voting_session_id = vs.id
            WHERE vs.is_active = 1 AND vs.started = 1 AND vs.ended = 0
            AND ps.voting_completed = 0
            ORDER BY ps.proposition_id ASC
            LIMIT 1
        `);

        if (proposition.length === 0) {
            return res.status(404).json({ message: 'Aucune proposition disponible pour le vote.' });
        }

        res.status(200).json({ propositionId: proposition[0].proposition_id });
    } catch (error) {
        console.error(`Erreur lors de la récupération de l'ID de la proposition : ${error.message}`);
        res.status(500).json({ error: 'Erreur interne du serveur : ' + error.message });
    }
});


// in routes/votes.js

router.get('/jury-vote', async (req, res) => {
    const userId = req.session.userId;
    if (!req.session.isJury) {
        req.flash('error_msg', 'Vous devez être un membre du jury pour accéder à cette page.');
        return res.redirect('/propositions/mes-propositions');
    }

    try {
        const [activeSession] = await db.query(`
            SELECT id FROM voting_sessions 
            WHERE is_active = 1 AND started = 1 AND ended = 0 AND type = 'jury'
        `);

        if (activeSession.length === 0) {
            // Render a specific view for when no session is active
            return res.render('layouts/main', {
                username: req.session.username,
                userId: req.session.userId,
                isAdmin: req.session.isAdmin,
                isJury: req.session.isJury,
                title: 'Vote du Jury - En Attente',
                view: '../jury/no-session', // Assumes you have a simple view for this
                css: ['jury-vote-style.css'], // Can still use the style for consistency
                js: ['jury-vote.js', 'sweet-alert.js'] // Load JS for polling
            });
        }

        const sessionId = activeSession[0].id;
        
        const [propositions] = await db.query(`
            SELECT p.*,
                   ps.voting_session_id,
                   GROUP_CONCAT(CASE WHEN i.type = 'before' THEN i.filename END) AS before_images,
                   GROUP_CONCAT(CASE WHEN i.type = 'after' THEN i.filename END) AS after_images
            FROM propositions p
            JOIN proposition_status ps ON p.id = ps.proposition_id
            LEFT JOIN images i ON p.id = i.proposition_id
            WHERE ps.voting_session_id = ?
            GROUP BY p.id, ps.voting_session_id
            ORDER BY p.id ASC
        `, [sessionId]);

        const [userVotes] = await db.query(
            'SELECT proposition_id, vote_value FROM votes WHERE session_id = ? AND user_id = ?',
            [sessionId, userId]
        );

        res.render('layouts/main', {
            username: req.session.username,
            userId: req.session.userId,
            isAdmin: req.session.isAdmin,
            isJury: req.session.isJury,
            propositions: propositions,
            userVotes: userVotes,
            sessionId: sessionId,
            title: 'Vote du Jury',
            view: '../jury/jury-vote',
            // THIS IS THE KEY CHANGE:
            css: ['detailProposition.css', 'jury-vote-style.css'],
            js: ['jury-vote.js', 'sweet-alert.js']
        });

    } catch (error) {
        console.error(`Erreur lors de la récupération du vote du jury : ${error.message}`);
        // Consider using a proper error page here instead of just sending text
        res.status(500).render('errors/500', { // Assumes you have an error view
            username: req.session.username,
            userId: req.session.userId,
            isAdmin: req.session.isAdmin,
            isJury: req.session.isJury,
            title: "Erreur",
            error: error
        });
    }
});

router.post('/proposition/:id/vote', upload.none(), async (req, res) => {
    const propositionId = req.params.id;
    const { grade } = req.body;
    const userId = req.session.userId;

    try {
        const [activeSession] = await db.query(`
            SELECT id, type FROM voting_sessions WHERE is_active = 1 AND started = 1 AND ended = 0
        `);

        if (activeSession.length === 0) {
            return res.status(400).json({ error: 'Aucune session de vote active trouvée.' });
        }

        const activeSessionId = activeSession[0].id;
        const sessionType = activeSession[0].type;
        
        // Authorization Check
        if (sessionType === 'jury' && !req.session.isJury) {
            return res.status(403).json({ error: 'Vous n\'êtes pas autorisé à voter dans cette session.' });
        }

        const [existingVote] = await db.query(`
            SELECT * FROM votes
            WHERE session_id = ? AND proposition_id = ? AND user_id = ?`,
            [activeSessionId, propositionId, userId]
        );

        if (existingVote.length > 0) {
            await db.query(`
                UPDATE votes
                SET vote_value = ?
                WHERE session_id = ? AND proposition_id = ? AND user_id = ?`,
                [grade, activeSessionId, propositionId, userId]
            );
            return res.status(200).json({ message: 'Votre vote a été mis à jour avec succès.' });
        } else {
            await db.query(`
                INSERT INTO votes (session_id, proposition_id, user_id, vote_value)
                VALUES (?, ?, ?, ?)`,
                [activeSessionId, propositionId, userId, grade]
            );
            return res.status(201).json({ message: 'Votre vote a été soumis avec succès.' });
        }

    } catch (error) {
        console.error('Erreur de base de données:', error);
        res.status(500).json({ error: 'Erreur interne du serveur.' });
    }
});

router.get('/statut-vote', function (req, res) {
    res.render('layouts/main', {
        username: req.session.username, userId: req.session.userId,
        isAdmin: req.session.isAdmin,
        isJury: req.session.isJury,
        title: 'statut',
        css: ['status.css'],
        js: ['status.js'],
        view: '../voting-sessions/status'
    });
});

router.get('/check-active-session', async (req, res) => {
    try {
        const [rows] = await db.query(`
            SELECT id, type, started, is_active
            FROM voting_sessions
            WHERE is_active = 1 and started = 1 AND ended = 0
            ORDER BY init_time DESC
            LIMIT 1
        `);

        if (rows.length > 0) {
            const session = rows[0];
            res.json({
                success: true,
                sessionType: session.type,
                sessionStarted: session.started,
            });
        } else {
            res.json({ success: false, message: "No active session found" });
        }
    } catch (error) {
        console.error("Error fetching active session:", error);
        res.status(500).json({ success: false, message: "Error fetching session data" });
    }
});

router.get('/global-vote', async (req, res) => {
    try {
        const userId = req.session.userId;

        const [session] = await db.query(`
            SELECT id, type FROM voting_sessions WHERE is_active = 1 AND started = 1 AND ended = 0
        `);

        if (!session[0] || session[0].type !== 'global') {
            return res.status(400).json({ error: 'Aucune session de vote utilisateur en cours' });
        }

        const [userVote] = await db.query(`
            SELECT COUNT(*) as count FROM votes 
            WHERE user_id = ? AND session_id = ?
        `, [userId, session[0].id]);

        if (userVote[0].count > 0) {
            return res.status(403).json({ error: 'Vous avez déjà voté dans cette session' });
        }

        const [propositions] = await db.query(`
    SELECT p.*, 
           GROUP_CONCAT(CASE WHEN i.type = 'before' THEN i.filename END) AS before_images, 
           GROUP_CONCAT(CASE WHEN i.type = 'after' THEN i.filename END) AS after_images
    FROM propositions p
    JOIN proposition_status ps ON p.id = ps.proposition_id
    LEFT JOIN images i ON p.id = i.proposition_id
    WHERE ps.voting_session_id = ?
    GROUP BY p.id
`, [session[0].id]);

        if (propositions.length === 0) {
            return res.status(404).json({ message: 'Aucune proposition disponible pour le vote' });
        }


        res.render('layouts/main', {
            username: req.session.username, userId: req.session.userId,
            isAdmin: req.session.isAdmin,
            isJury: req.session.isJury,
            propositions: propositions,
            title: 'Vote Global',
            view: '../voting-sessions/global-vote.ejs',
            css: ['detailProposition.css'],
            js: ['global-vote.js', 'sweet-alert.js'],
        });


    } catch (error) {
        console.error(error);
        res.status(500).json({ error: 'Erreur interne du serveur', details: error });
    }
});

router.post('/global-vote/submit', async (req, res) => {

    const { votes } = req.body;
    const userId = req.session.userId;

    try {
        const [session] = await db.query(`
            SELECT id, type FROM voting_sessions WHERE is_active = 1 AND started = 1 AND ended = 0
        `);

        if (!session[0] || session[0].type !== 'global') {
            return res.status(400).json({ error: 'Aucune session de vote utilisateur en cours' });
        }

        const [userVote] = await db.query(`
            SELECT COUNT(*) as count FROM votes 
            WHERE user_id = ? AND session_id = ?
        `, [userId, session[0].id]);

        if (userVote[0].count > 0) {
            return res.status(403).json({ error: 'Vous avez déjà voté dans cette session' });
        }
        const connection = await db.getConnection();
        let votePromises;
        try {
            await connection.beginTransaction();

            votePromises = votes.map(vote =>
                connection.query(`
                INSERT INTO votes (session_id, proposition_id, user_id, vote_value)
                VALUES (?, ?, ?, ?)
            `, [session[0].id, vote.propositionId, userId, vote.value ? vote.value : 0])
            );
            await Promise.all(await votePromises);
            await connection.commit();

        } catch (error) {
            await connection.rollback();
            throw error;
        } finally {
            connection.release();
        }

        res.status(201).json({ message: 'Votes soumis avec succès' });

    } catch (error) {
        console.error(error);
        res.status(500).json({ error: 'Erreur lors de la soumission des votes', details: error });
    }
});

router.get('/:id/resultats-votes-global', async (req, res) => {
    try {
        const sessionId = req.params.id;

        const [session] = await db.query('SELECT * FROM voting_sessions WHERE id = ?', [sessionId]);

        if (session.length === 0) {
            return res.status(404).json({ error: 'Session non trouvée' });
        }
        if (!session[0].ended && !req.session.isAdmin) {
            return res.redirect('/propositions/mes-propositions');
        }

        const [propositionsStatus] = await db.query(`
            SELECT 
                ps.proposition_id, 
                ps.is_validated, 
                ps.average_grade, 
                p.id, 
                p.display_id,
                p.date_emission,
                CONCAT(u.first_name, ' ', u.last_name) AS full_name,
                p.objet,
                p.description_situation_actuelle,
                p.description_amelioration_proposee,
                p.impact_economique, 
                p.impact_technique, 
                p.impact_formation, 
                p.impact_fonctionnement 
            FROM proposition_status ps
            JOIN propositions p ON ps.proposition_id = p.id
            JOIN users u ON p.user_id = u.id
            WHERE ps.voting_session_id = ?
        `, [sessionId]);

        if (propositionsStatus.length === 0) {
            return res.status(404).json({ message: 'Aucune proposition trouvée pour cette session' });
        }

        // Sort propositions into categories based on impacts
        const economicImpactPropositions = propositionsStatus
            .filter(prop => prop.impact_economique)
            .sort((a, b) => b.average_grade - a.average_grade);
        const technicalImpactPropositions = propositionsStatus
            .filter(prop => prop.impact_technique)
            .sort((a, b) => b.average_grade - a.average_grade);
        const trainingImpactPropositions = propositionsStatus
            .filter(prop => prop.impact_formation)
            .sort((a, b) => b.average_grade - a.average_grade);
        const operationalImpactPropositions = propositionsStatus
            .filter(prop => prop.impact_fonctionnement)
            .sort((a, b) => b.average_grade - a.average_grade);

        res.render('layouts/main', {
            username: req.session.username, userId: req.session.userId,
            isAdmin: req.session.isAdmin,
            isJury: req.session.isJury,
            session: session[0],
            sessionId,
            economicImpactPropositions,
            technicalImpactPropositions,
            trainingImpactPropositions,
            operationalImpactPropositions,
            title: 'Details session',
            view: '../voting-sessions/global-vote-results',
            css: ['global-vote-results.css'],
            js: ['sweet-alert.js']
        });
    } catch (error) {
        res.status(500).json({ error: 'Erreur de base de données', details: error });
    }
});

router.get('/:id', async (req, res) => {
    // UPDATED ACCESS: Allow admin or jury members
    if (!req.session.isAdmin && !req.session.isJury) {
        return res.redirect('/propositions/mes-propositions');
    }

    try {
        const sessionId = req.params.id;

        const [session] = await db.query('SELECT * FROM voting_sessions WHERE id = ?', [sessionId]);

        if (session.length === 0) {
            return res.status(404).json({ error: 'Session non trouvée' });
        }
        
        // REMOVED THE FAULTY REDIRECT. Now both admins and jury can see active/ended sessions.
        // The view will handle hiding admin-only controls.

        const [propositionsStatus] = await db.query(`
            SELECT 
                ps.proposition_id, 
                ps.is_validated,
                ps.average_grade,
                p.id,
                p.display_id,
                p.date_emission,
                CONCAT(u.first_name, ' ', COALESCE(u.last_name, '')) AS full_name,
                COALESCE(p.objet, p.description_situation_actuelle) as objet,
                p.description_situation_actuelle,
                p.description_amelioration_proposee,
                p.is_excluded
            FROM proposition_status ps
            JOIN propositions p ON ps.proposition_id = p.id
            JOIN users u ON p.user_id = u.id
            WHERE ps.voting_session_id = ?
        `, [sessionId]);

        if (propositionsStatus.length === 0) {
            return res.status(404).json({ message: 'Aucune proposition trouvée pour cette session' });
        }

        res.render('layouts/main', {
            username: req.session.username, userId: req.session.userId,
            isAdmin: req.session.isAdmin,
            isJury: req.session.isJury,
            session: session[0],
            propositions: propositionsStatus,
            sessionId,
            title: 'Details session',
            view: '../voting-sessions/details',
            css: ['tables.css'],
            js: ['sweet-alert.js', 'ag-grid.js']
        });
    } catch (error) {
        console.error("Error fetching session details:", error);
        res.status(500).json({ error: 'Erreur de base de données', details: error });
    }
});


router.get('/status/:id', async (req, res) => {
    try {
        const { id } = req.params;
        const [[session]] = await db.query(
            'SELECT is_active, started, ended FROM voting_sessions WHERE id = ?',
            [id]
        );

        if (!session) {
            return res.status(404).json({ success: false, message: 'Session not found' });
        }
        
        const isOver = !session.is_active || session.ended;

        res.json({ success: true, isOver });

    } catch (error) {
        console.error('Error fetching session status:', error);
        res.status(500).json({ success: false, message: 'Internal server error' });
    }
});

module.exports = router;

===== ./views/admin/charts/cumul.ejs =====
<nav class="minimal-navbar">
  <ul class="navbar-links">
    <li><a href="/charts/stacked" id="pie-chart-link">Idées émises par salarié</a></li>
    <li><a href="/charts/pie" id="stack-chart-link">Idées Soldée vs En Cours</a></li>
    <li><a class="active" href="/charts/cumul" id="cumul-chart-link">Cumul des Idées Émises</a></li>
  </ul>
</nav>
<br>
<form id="filter-form">
  <label for="start-month">Mois de début :</label>
  <input type="month" id="start-month" name="start-month" required>

  <label for="end-month">Mois de fin :</label>
  <input type="month" id="end-month" name="end-month" required>

  <button type="submit">Générer le graphique</button>
</form>

<canvas id="cumulChart" width="800" height="400"></canvas>


===== ./views/admin/charts/pie.ejs =====
<nav class="minimal-navbar">
  <ul class="navbar-links">
    <li><a  href="/charts/stacked" id="pie-chart-link">Idées émises par salarié</a></li>
    <li><a class="active" href="/charts/pie" id="stack-chart-link">Idées Soldée vs En Cours</a></li>
    <li><a href="/charts/cumul" id="cumul-chart-link">Cumul des Idées Émises</a></li>
  </ul>
</nav>
<br>
<div class="container">
  <div class="controls-table-container">
    <div>
      <label>Sélectionner l'année(s) :</label>
      <div id="yearSelector" class="custom-dropdown">
      </div>

      <label>Sélectionner le(s) mois :</label>
      <div id="monthSelector" class="custom-dropdown">
      </div>
    </div>

    <div class="table-container">
      <table>
        <thead>
          <tr>
            <th>Mois</th>
            <th>Propositions Soldée</th>
            <th>Propositions En Cours</th>
            <th>Total</th>
          </tr>
        </thead>
        <tbody id="tableBody"></tbody>
      </table>
    </div>
  </div>

  <!-- Côté droit : Graphique -->
  <div class="chart-container">
    <canvas id="pieChart"></canvas>
  </div>
</div>


===== ./views/admin/charts/stacked.ejs =====
<nav class="minimal-navbar">
  <ul class="navbar-links">
    <li><a class="active" href="/charts/stacked" id="pie-chart-link">Idées émises par salarié</a></li>
    <li><a  href="/charts/pie" id="stack-chart-link">Idées Soldée vs En Cours</a></li>
    <li><a href="/charts/cumul" id="cumul-chart-link">Cumul des Idées Émises</a></li>
  </ul>
</nav>
<br>
<label for="yearSelect">Sélectionnez l'année :</label>
<select id="yearSelect" onchange="updateChart()">
  <% years.forEach(year => { %>
  <option value="<%= year %>" <%= year === defaultYear ? 'selected' : '' %>><%= year %></option>
  <% }); %>
</select>

<canvas id="stackedChart"></canvas>

<table id="propositionsTable">
  <thead>
    <tr>
    </tr>
  </thead>
  <tbody id="tableBody">
  </tbody>
</table>



===== ./views/admin/propositions/details.ejs =====
<div class="proposition-container">
  <header class="proposition-header">
    <h1 class="proposition-title"><%= proposition.objet %></h1>
    <div class="proposition-actions">
      <div class="proposition-actions">
        <button class="btn-delete" onclick="confirmDelete(<%= proposition.id %>)">Supprimer</button>
      </div>
    </div>
  </header>

  <section class="proposition-info">
    <div class="info-item">
      <h2 class="info-subtitle">Description de la Situation Actuelle</h2>
      <p class="info-text"><%= proposition.description_situation_actuelle %></p>
    </div>
    <div class="info-item">
      <h2 class="info-subtitle">Description de l'Amélioration Proposée</h2>
      <p class="info-text"><%= proposition.description_amelioration_proposee %></p>
    </div>
  </section>

  <section class="proposition-status">
    <h2 class="status-title">Statut</h2>
    <div class="status <%= proposition.statut %>">
      <%= proposition.statut === 'soldee' ? 'Soldée' : proposition.statut === 'en cours' ? 'En Cours' : proposition.statut === 'anulee' ? 'Annulée' : 'Non Soldée' %>
    </div>
  </section>

  <section class="proposition-impacts">
    <h2 class="impacts-title">Impacts</h2>
    <ul>
      <% if (proposition.impact_economique) { %>
      <li class="impact-item">💡 Impact économique</li>
      <% } %>
      <% if (proposition.impact_technique) { %>
      <li class="impact-item">🔧 Impact technique</li>
      <% } %>
      <% if (proposition.impact_formation) { %>
      <li class="impact-item">📚 Impact de formation</li>
      <% } %>
      <% if (proposition.impact_fonctionnement) { %>
      <li class="impact-item">⚙️ Impact de fonctionnement</li>
      <% } %>
    </ul>
  </section>

  <section class="proposition-images">
    <h2 class="images-title">Images Avant
    </h2>
    <div class="image-gallery" data-type="before">
    </div>

    <h2 class="images-title">Images Après</h2>
    <div class="image-gallery" data-type="after">
    </div>
  </section>

  <div id="imageModal" class="modal">
    <span class="modal-close" onclick="closeModal()">&times;</span>
    <img class="modal-content" id="modalImage">
    <a id="downloadLink" class="btn-download" download>Télécharger</a>
  </div>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>

  <script>

    function confirmDelete(propositionId) {
      Swal.fire({
        title: "Êtes-vous sûr de vouloir supprimer cette proposition ?",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Oui',
        cancelButtonText: 'Non'
      }).then((result) => {
        if (result.isConfirmed) {
          fetch(`/propositions/${propositionId}/delete`, {
              method: 'DELETE'
            })
            .then(response => response.json())
            .then(data => {
              if (data.success) {
                const sessionId = '<%= votingSessionId %>';
                window.location.href = `http://localhost:3000/voting-sessions/${sessionId}`;
              } else {
                Swal.fire("Erreur", data.message, "error");
              }
            });
        }
      });
    }

    function refreshGallery(type) {
      const propositionId = '<%= proposition.id %>';
      fetch(`/images/proposition/${propositionId}?type=${type}`)
        .then(response => response.json())
        .then(data => {
          console.log(data);

          if (data.success) {
            const galleryContainer = document.querySelector(`.image-gallery[data-type="${type}"]`);
            if (data.images.length > 0) {
              galleryContainer.innerHTML = data.images.map(image => `
    <div class="image-wrapper" onclick="openModal('/images/${propositionId}/${type}/${image.filename}')">
      <img src="/images/${propositionId}/${type}/${image.filename}" alt="Image ${type === 'before' ? 'Avant' : 'Après'}" class="image-thumbnail">
    </div>
    `).join('');
            } else {
              galleryContainer.innerHTML = `<p class="no-images-message">Aucune image "${type === 'before' ? 'Avant' : 'Après'}" disponible.</p>`;
            }
          } else {
            console.error('Error fetching images:', data.message);
          }
        })
        .catch(error => {
          console.error('Error updating image gallery:', error);
        });
    }

    document.addEventListener('DOMContentLoaded', () => {
      refreshGallery('before');
      refreshGallery('after');
    });
  </script>
</div>

===== ./views/admin/propositions/list.ejs =====
<div class="content-container">
  <h1>Propositions</h1>

  <div id="myGrid" class="ag-theme-alpine"></div>
    
  <div id="myModal" class="modal">
    <div class="modal-content">
      <span class="close">×</span>
      <h2>Détails de la Proposition</h2>
      <div id="rowDetails"></div>
      <button class="button" id="viewDetailsButton">Voir les détails</button>
    </div>
  </div>
</div>
<script src="/localization/fr-FR.js"></script>

<script>
  // FIX IS HERE: The variable is declared inside the script tag.
  const rowData = <%- JSON.stringify(propositions) %>;

  document.addEventListener('DOMContentLoaded', () => {
    const columnDefs = [
      {
        headerName: "ID",
        field: "display_id",
        sortable: true, filter: true, resizable: true, flex: 1, sort: 'desc', minWidth: 80
      },
      {
        headerName: "Nom",
        field: "utilisateur",
        sortable: true, filter: true, resizable: true, flex: 1.4, minWidth: 100
      },
      {
        headerName: "Objet",
        field: "objet",
        sortable: true, filter: true, resizable: true, flex: 2, minWidth: 200
      },
      {
        headerName: "Statut",
        field: "statut",
        sortable: true, filter: true, resizable: true, flex: 1.2, minWidth: 120,
        cellStyle: params => ({ color: params.value === 'soldee' ? 'green' : params.value === 'en cours' ? 'orange' : 'inherit' })
      },
      {
        headerName: "Sélection Jury",
        field: "selection_status",
        sortable: true, filter: true, resizable: true, flex: 1.2, minWidth: 130,
        cellRenderer: (params) => {
          const status = params.value;
          if (status === 'Retenu') {
              return `<span style="color: #28a745; font-weight: bold;">${status}</span>`;
          } else if (status === 'Non Retenu') {
              return `<span style="color: #dc3545; font-weight: bold;">${status}</span>`;
          } else {
              return `<span style="color: #6c757d;">${status}</span>`;
          }
        }
      },
      {
        headerName: "Date",
        field: "date_emission",
        sortable: true, flex: 1.5,
        valueFormatter: params => params.value ? new Date(params.value).toLocaleDateString('fr-FR') : '',
        minWidth: 140
      },
      {
        headerName: "Actions",
        cellRenderer: 'buttonRenderer',
        maxWidth: 150, sortable: false, filter: false
      }
    ];

    const buttonRenderer = (params) => {
      const button = document.createElement('button');
      button.innerText = 'Détails';
      button.className = 'button secondary';
      button.onclick = (event) => {
        event.stopPropagation();
        window.location.href = `/propositions/proposition/${params.data.id}`;
      };
      return button;
    };

    const gridOptions = {
      columnDefs: columnDefs,
      rowData: rowData,
      defaultColDef: {
        sortable: true,
        filter: true,
        resizable: true,
      },
      localeText: AG_GRID_LOCALE_FR,
      pagination: true,
      paginationPageSize: 50,
      domLayout: 'autoHeight',
      suppressRowClickSelection: true,
      components: {
        buttonRenderer: buttonRenderer
      },
      onRowClicked: params => {
        showRowDetails(params.data);
      },
      onGridReady: params => {
        params.api.refreshCells({ force: true });
      }
    };

    const eGridDiv = document.querySelector('#myGrid');
    agGrid.createGrid(eGridDiv, gridOptions);

    const modal = document.getElementById('myModal');
    const closeButton = document.querySelector('.close');
    const rowDetails = document.getElementById('rowDetails');
    const viewDetailsButton = document.getElementById('viewDetailsButton');

    function escapeHtml(text) {
        if (text === null || text === undefined) return '';
        const div = document.createElement('div');
        div.innerText = text;
        return div.innerHTML;
    }

    function showRowDetails(data) {
      rowDetails.innerHTML = `
      <p><strong>ID:</strong> ${data.display_id || 'N/A'}</p>
      <p><strong>Objet:</strong> ${escapeHtml(data.objet || 'Non renseigné')}</p>
      <p><strong>Situation Actuelle:</strong> ${escapeHtml(data.description_situation_actuelle || 'Non renseigné')}</p>
      <p><strong>Amélioration Proposée:</strong> ${escapeHtml(data.description_amelioration_proposee || 'Non renseigné')}</p>
      <p><strong>Statut:</strong> ${data.statut || 'Non défini'}</p>
      <p><strong>Date:</strong> ${data.date_emission ? new Date(data.date_emission).toLocaleDateString('fr-FR') : 'N/A'}</p>
    `;
      modal.style.display = 'flex';
      viewDetailsButton.onclick = () => {
        window.location.href = `/propositions/proposition/${data.id}`;
      };
    }

    closeButton.onclick = () => {
      modal.style.display = 'none';
    };

    window.onclick = event => {
      if (event.target === modal) {
        modal.style.display = 'none';
      }
    };
  });
</script>

===== ./views/admin/users/addUser.ejs =====
  <div class="container">
    <div class="form-container">
      <h1>Ajouter un nouvel utilisateur</h1>

      <% if (success_msg != '') { %>
      <div class="alert alert-success">
        <%= success_msg %>
      </div>
      <% } %>
      <% if (error_msg != '') { %>
      <div class="alert alert-danger">
        <%= error_msg %>
      </div>
      <% } %>

      <form action="/users/add" method="POST">
        <div class="form-group">
          <label for="username">Login</label>
          <input type="text" class="form-control" id="username" name="username" required>
        </div>

        <div class="form-group">
          <label for="password">Mot de passe</label>
          <input type="password" class="form-control" id="password" name="password" required>
        </div>

        <div class="form-group">
          <label for="first_name">Prénom</label>
          <input type="text" class="form-control" id="first_name" name="first_name" required>
        </div>

        <div class="form-group">
          <label for="last_name">Nom de famille</label>
          <input type="text" class="form-control" id="last_name" name="last_name" required>
        </div>

        <div class="form-group">
          <label for="function_id">Fonction</label>
          <select class="form-control" id="function_id" name="function_id" required>
            <% functions.forEach(function(func) { %>
            <option value="<%= func.id %>"><%= func.name %></option>
            <% }) %>
          </select>
        </div>

        <div class="form-group form-check">
          <input type="checkbox" class="form-check-input" id="is_jury" name="is_jury">
          <label class="form-check-label" for="is_jury">Jury</label>
        </div>

        <button type="submit" class="btn btn-primary">Ajouter l'utilisateur</button>
      </form>

      <a href="/users" class="btn btn-secondary">Retour à la liste des utilisateurs</a>
    </div>
  </div>

===== ./views/admin/users/editUser.ejs =====
<h1>Modifier l'Utilisateur</h1>
<% if (error_msg !='' ) { %>
  <div class="alert alert-error">
    <%= error_msg %>
  </div>
  <% } %>
    <% if (success_msg !='' ) { %>
      <div class="alert alert-success">
        <%= success_msg %>
      </div>
      <% } %>
        <form action="/images/upload-profile-image/<%= user.id %>" class="dropzone" id="profileImageDropzone"
          enctype="multipart/form-data">
          <div class="add-wrapper">
            <img class="add-button" id="add" src="/images/add-photo.jpg" alt="Dynamic Image" style="width: 100px">
          </div>
        </form>
        <form action="/users/edit/<%= user.id %>" method="POST">
          <div class="form-group">
            <label for="username">Login</label>
            <input type="text" id="username" name="username" value="<%= user.username %>">
          </div>

          <div class="form-group">
            <label for="first_name">Prénom</label>
            <input type="text" id="first_name" name="first_name" value="<%= user.first_name %>">
          </div>

          <div class="form-group">
            <label for="last_name">Nom</label>
            <input type="text" id="last_name" name="last_name" value="<%= user.last_name %>">
          </div>

          <div class="form-group">
            <label for="function_id">Fonction</label>
            <select id="function_id" name="function_id">
              <% functions.forEach(function(f) { %>
                <option value="<%= f.id %>" <%=user.function_id===f.id ? 'selected' : '' %>><%= f.name %>
                </option>
                <% }) %>
            </select>
          </div>

          <div class="form-group">
            <label for="password">Mot de passe</label>
            <input type="text" id="password" name="password" value="<%= user.password %>">
          </div>

          <div class="form-group checkbox-group">
            <div class="checkbox-wrapper-21">
              <label class="control control--checkbox">
                admin
                <input type="checkbox" name="is_admin" <%=user.is_admin ? 'checked' : '' %> />
                <div class="control__indicator"></div>
              </label>
            </div>
            <div class="checkbox-wrapper-21">
              <label class="control control--checkbox">
                jury
                <input type="checkbox" name="is_jury" <%=user.is_jury ? 'checked' : '' %> />
                <div class="control__indicator"></div>
              </label>
            </div>
          </div>

          <div class="form-actions">
            <button type="submit" class="button">Sauvegarder</button>
            <button type="button" class="button secondary" onclick="confirmDelete()">Supprimer l'utilisateur</button>
          </div>
        </form>

        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

        <script>
          function confirmDelete() {
            Swal.fire({
              title: 'Êtes-vous sûr?',
              text: 'Vous ne pourrez pas annuler cette action!',
              icon: 'warning',
              showCancelButton: true,
              confirmButtonColor: '#3085d6',
              cancelButtonColor: '#d33',
              confirmButtonText: 'Oui, supprimer!',
              cancelButtonText: 'Annuler'
            }).then((result) => {
              if (result.isConfirmed) {
                var form = document.createElement('form');
                form.method = 'POST';
                form.action = '/users/delete/<%= user.id %>';
                document.body.appendChild(form);
                form.submit();
              }
            });
          }
        </script>

===== ./views/admin/users/listUsers.ejs =====
<!-- <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/ag-grid-community/styles/ag-grid.css"> -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/ag-grid-community/styles/ag-theme-alpine.css">
<div class="content-container">
  <h1>Liste des Utilisateurs</h1>

  <div id="myGrid" class="ag-theme-alpine"></div>
  <div id="dataContainer" data-row-data='<%= JSON.stringify(users).replace(/' /g, "&#39;" ) %>' style="display: none;">
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/ag-grid-community/dist/ag-grid-community.noStyle.js"></script>
<script>
  document.addEventListener('DOMContentLoaded', () => {
    const columnDefs = [
    {
      headerName: "Login",
      field: "username",
      sortable: true,
      resizable: true,
      flex: 1.5,
      minWidth: 130

    },
    {
      headerName: "Prénom",
      field: "first_name",
      sortable: true,
      resizable: true,
      flex: 1.5,
      minWidth: 100
    },
    {
      headerName: "Nom",
      field: "last_name",
      sortable: true,
      resizable: true,
      flex: 1.5,
      minWidth: 100
    },
    {
      headerName: "Fonction",
      field: "function_name",
      sortable: true,
      resizable: true,
      flex: 2,
      minWidth: 100
    },
    {
      headerName: "Admin",
      field: "is_admin",
      sortable: true,
      resizable: true,
      flex: 1,
      cellRenderer: params => params.value ? 'Oui' : 'Non',
      minWidth: 100
    },
    {
      headerName: "Jury",
      field: "is_jury",
      sortable: true,
      flex: 1,
      cellRenderer: params => params.value ? 'Oui' : 'Non',
      minWidth: 100
    },
    {
      headerName: "Actions",
      floatingFilter: false,
      sortable: false,
      cellRenderer: (params) => {
        const container = document.createElement('div');

        // Edit button
        const editButton = document.createElement('button');
        editButton.innerText = 'Modifier';
        editButton.className = 'button secondary';
        editButton.style.marginRight = '5px';
        editButton.onclick = () => {
          window.location.href = `/users/edit/${params.data.id}`;
        };
        container.appendChild(editButton);

        const addPropositionButton = document.createElement('button');
        addPropositionButton.innerText = 'Ajouter Proposition';
        addPropositionButton.className = 'button primary';
        addPropositionButton.onclick = () => {
          window.location.href = `/propositions/add/${params.data.id}`;
        };
        container.appendChild(addPropositionButton);

        return container;
      },
      flex: 2,
      minWidth: 260,
    }

    ];

    const dataContainer = document.getElementById('dataContainer');
    const rowData = JSON.parse(dataContainer.getAttribute('data-row-data'));

    const gridOptions = {
      columnDefs: columnDefs,
      rowData: rowData,
      pagination: true,
      defaultColDef: {
        sortable: true,
        filter: true,
        resizable: true,
      },
      paginationPageSize: 50,
      domLayout: 'autoHeight',
      suppressRowClickSelection: true,
    };

    const eGridDiv = document.querySelector('#myGrid');
    agGrid.createGrid(eGridDiv, gridOptions);
  });
</script>

===== ./views/auth/login.ejs =====
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" type="image/x-icon" href="/images/Logo-IMA-site-Web.ico">
    <title>Login</title>
</head>
<style>
    /* Global reset */
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: Arial, sans-serif;
    }

    /* Body styling */
    body {
        background-size: cover;
        background-position: center;
        background-attachment: fixed;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        background-color: #f4f7f6;
        color: #333;
        flex-direction: column;
        text-align: center;
    }


    /* Logo styling */
    .logo {
        max-width: 150px;
        margin-bottom: 20px;
    }

    /* Error message styling */
    .error {
        color: #e74c3c;
        font-size: 14px;
        margin-bottom: 20px;
    }

    /* Form container */
    .form {
        background-color: #fff;
        padding: 30px;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        width: 100%;
        max-width: 400px;
    }

    /* Label and input styling */
    label {
        display: block;
        position: relative;
        margin-bottom: 20px;
    }

    /* Input styling */
    .input {
        width: 100%;
        padding: 12px 15px;
        padding-top: 20px;
        border: 1px solid #ccc;
        border-radius: 5px;
        font-size: 16px;
        outline: none;
        background-color: #f4f4f4;
        height: 50px;
    }

    .input:focus {
        border-color: #3498db;
    }

    /* Placeholder styling */
    .input::placeholder {
        color: transparent;
    }

    span {
        user-select: none;
        position: absolute;
        left: 15px;
        top: 35%;
        transform: translateY(-10);
        font-size: 14px;
        color: #aaa;
        transition: 0.2s ease-in-out;
    }

    /* Move the label when input is focused or has content */
    .input:focus+span,
    .input:not(:placeholder-shown)+span {
        top: 0;
        font-size: 12px;
        color: #3498db;
    }

    /* Button styling */
    .submit {
        width: 100%;
        padding: 12px;
        background-color: #3498db;
        color: white;
        border: none;
        border-radius: 5px;
        font-size: 16px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

    .submit:hover {
        background-color: #2980b9;
    }

    @media (max-width: 480px) {
        .form {
            width: 90%;
            padding: 20px;
        }
    }
</style>

<body style="  background-image: url('/images/2024-rain-curtain-tessellated-pattern-no-div-pure-css.png');">

    <% if (error_msg !='' ) { %>
        <p class="error">
            <%= error_msg %>
        </p>
        <% } %>

            <form action="login" method="POST" class="form">
                <img src="/images/logo.jpg" alt="Logo" class="logo">
                <label>
                    <input style="background-color: white;" required placeholder=" " type="text" name="username"
                        class="input">
                    <span style="color:black;">Login :</span>
                </label>

                <label>
                    <input style="background-color: white;" required placeholder=" " type="password" name="password"
                        class="input">
                    <span style="color:black;">Mot de passe :</span>
                </label>
                <button type="submit" class="submit">Se connecter</button>
            </form>
</body>

</html>


===== ./views/auth/logout.ejs =====
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Logout</title>
</head>
<style>
    /* Global reset */
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: 'Arial', sans-serif;
    }

    /* Body styling */
    body {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        background-color: #f5f5f5;
        color: #333;
    }

    /* Main container for logout content */
    .logout-container {
        text-align: center;
        background-color: #fff;
        padding: 30px;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        width: 100%;
        max-width: 400px;
    }

    /* Heading styling */
    .logout-heading {
        font-size: 2rem;
        color: #333;
        margin-bottom: 20px;
    }

    /* Message styling */
    .logout-message {
        font-size: 1.1rem;
        color: #555;
        margin-bottom: 30px;
    }

    /* Form styling */
    .logout-form {
        margin-bottom: 20px;
    }

    /* Logout button styling */
    .btn-logout {
        background-color: #e74c3c;
        color: white;
        font-size: 1.2rem;
        padding: 12px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        width: 100%;
        transition: background-color 0.3s ease;
    }

    .btn-logout:hover {
        background-color: #c0392b;
    }

    /* Cancel button styling */
    .btn-cancel {
        text-decoration: none;
        font-size: 1rem;
        color: #3498db;
        transition: color 0.3s ease;
    }

    .btn-cancel:hover {
        color: #2980b9;
    }

    /* Mobile responsiveness */
    @media (max-width: 480px) {
        .logout-container {
            width: 90%;
            padding: 20px;
        }

        .logout-heading {
            font-size: 1.8rem;
        }

        .logout-message {
            font-size: 1rem;
        }
    }
</style>

<body>
    <h1>Logout</h1>

    <p>Are you sure you want to logout?</p>

    <form action="/logout" method="GET">
        <button type="submit">Yes, Logout</button>
    </form>

    <p><a href="/dashboard">Cancel</a></p>
</body>

</html>

===== ./views/errors/404.ejs =====
 


===== ./views/errors/500.ejs =====


===== ./views/functions/list.ejs =====
<div class="top-bar">
  <button id="addFunctionBtn" class="btn btn-primary">+ Ajouter une fonction</button>
</div>

<% if (functions.length === 0) { %>
<div class="no-propositions-message">Aucune fonction disponible pour le moment.</div>
<% } else { %>
<table class="table">
  <thead>
    <tr>
      <th>ID</th>
      <th>Nom de la fonction</th>
      <th>Actions</th>
    </tr>
  </thead>
  <tbody>
    <% functions.forEach(function(func) { %>
    <tr>
      <td><%= func.id %></td>
      <td><%= func.name %></td>
      <td>
        <button class="btn btn-outline modifyFunctionBtn" data-id="<%= func.id %>" data-name="<%= func.name %>">Modifier</button>
        <button class="btn btn-danger deleteFunctionBtn" data-id="<%= func.id %>">Supprimer</button>
      </td>
    </tr>
    <% }); %>
  </tbody>
</table>
<% } %>


===== ./views/jury/jury-vote.ejs =====
<div class="proposition-container">
  <header class="proposition-header">
    <h1 class="proposition-title" id="proposition-objet"></h1>
    <!-- The pagination is now part of the navigation container at the bottom -->
  </header>

  <section class="proposition-info">
    <div class="info-item">
      <h2 class="info-subtitle">Description de la Situation Actuelle</h2>
      <p class="info-text" id="proposition-description-situation"></p>
    </div>
    <div class="info-item">
      <h2 class="info-subtitle">Description de l'Amélioration Proposée</h2>
      <p class="info-text" id="proposition-description-amelioration"></p>
    </div>
  </section>

  <section class="proposition-status">
    <h2 class="status-title">Statut</h2>
    <div class="status" id="proposition-status"></div>
  </section>

  <section class="proposition-impacts">
    <h2 class="impacts-title">Impacts</h2>
    <ul id="proposition-impacts-list"></ul>
  </section>

  <section class="proposition-images">
    <h2 class="images-title">Images Avant</h2>
    <div class="image-gallery" data-type="before" id="before-images"></div>

    <h2 class="images-title">Images Après</h2>
    <div class="image-gallery" data-type="after" id="after-images"></div>
  </section>

  <!-- NEW: Revamped Voting Section -->
  <div class="jury-vote-container">
    <h2>Votre Vote</h2>
    <div class="jury-vote-buttons">
      <button class="vote-btn vote-non" data-vote="0">
        <span class="emoji">👎</span> Non
      </button>
      <button class="vote-btn vote-oui" data-vote="6">
        <span class="emoji">👍</span> Oui
      </button>
    </div>
  </div>

  <!-- NEW: Revamped Navigation Section -->
  <div class="navigation-container">
    <button class="nav-button" id="prev-btn" disabled>Précédent</button>
    <span class="pagination" id="pagination">0/0</span>
    <button class="nav-button" id="next-btn">Suivant</button>
  </div>

  <!-- Hidden data passed from the server (unchanged) -->
  <input type="hidden" id="propositions-data" value="<%= JSON.stringify(propositions) %>">
  <input type="hidden" id="user-votes-data" value="<%= JSON.stringify(userVotes) %>">
  <input type="hidden" id="session-id-data" value="<%= sessionId %>">
</div>

<!-- Image Modal (unchanged) -->
<div id="imageModal" class="modal">
  <span class="modal-close" onclick="closeModal()">×</span>
  <img class="modal-content" id="modalImage">
  <a id="downloadLink" class="btn-download" download>Télécharger</a>
</div>

===== ./views/jury/proposition.ejs =====
  <div class="proposition-container">
    <header class="proposition-header">
      <h1 class="proposition-title"><%= proposition.objet %></h1>
    </header>

    <section class="proposition-info">
      <div class="info-item">
        <h2 class="info-subtitle">Description de la Situation Actuelle</h2>
        <p class="info-text"><%= proposition.description_situation_actuelle %></p>
      </div>
      <div class="info-item">
        <h2 class="info-subtitle">Description de l'Amélioration Proposée</h2>
        <p class="info-text"><%= proposition.description_amelioration_proposee %></p>
      </div>
    </section>

    <section class="proposition-status">
      <h2 class="status-title">Statut</h2>
      <div class="status <%= proposition.statut %>">
        <%= proposition.statut === 'soldee' ? 'Soldée' : proposition.statut === 'en cours' ? 'En Cours' : proposition.statut === 'anulee' ? 'Annulée' : 'Non Soldée' %>
      </div>
    </section>

    <section class="proposition-impacts">
      <h2 class="impacts-title">Impacts</h2>
      <ul>
        <% if (proposition.impact_economique) { %>
        <li class="impact-item">💡 Impact économique</li>
        <% } %>
        <% if (proposition.impact_technique) { %>
        <li class="impact-item">🔧 Impact technique</li>
        <% } %>
        <% if (proposition.impact_formation) { %>
        <li class="impact-item">📚 Impact de formation</li>
        <% } %>
        <% if (proposition.impact_fonctionnement) { %>
        <li class="impact-item">⚙️ Impact de fonctionnement</li>
        <% } %>
      </ul>
    </section>
    <section class="proposition-images"></section>
    <h2 class="images-title">Images Avant
    </h2>
    <div class="image-gallery" data-type="before">
    </div>

    <h2 class="images-title">Images Après</h2>
    <div class="image-gallery" data-type="after">
    </div>
    </section>
    <div class="grading-section">
      <h2>Évaluez cette proposition</h2>
      <form id="gradeForm" action="/voting-sessions/proposition/<%= proposition.id %>/vote" method="POST" class="grade-form">
        <div class="radio-group">
          <% for (let i = 1; i <= 6; i++) { %>
          <label class="grade-label">
            <input type="radio" name="grade" value="<%= i %>" <%= userVote == i ? 'checked' : '' %> required>
            <span class="custom-radio"><%= i %></span>
          </label>
          <% } %>
        </div>
        <button type="submit" class="submit-button">Soumettre</button>
      </form>
    </div>
    <div id="imageModal" class="modal">
      <span class="modal-close" onclick="closeModal()">&times;</span>
      <img class="modal-content" id="modalImage">
      <a id="downloadLink" class="btn-download" download>Télécharger</a>
    </div>
    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const propositionId = '<%= proposition.id %>';
        const submitButton = document.querySelector(".submit-button");

        function checkPropositionStatus() {
          fetch(`/voting-sessions/proposition-status/${propositionId}`)
            .then(response => response.json())
            .then(data => {
              if (data.error) {
                console.error('Erreur lors de la récupération du statut de la proposition:', data.error);
                return;
              }
              
              if (!data.is_current) {
                location.reload();
                return;
              }

              if (data.is_voted) {
                const voteInputs = document.querySelectorAll('.grade-form input[type="radio"]');
                const isAlreadyDisabled = Array.from(voteInputs).some(input => input.disabled);

                if (submitButton) submitButton.remove();
                if (!isAlreadyDisabled) {
                  voteInputs.forEach(input => input.disabled = true);

                  Swal.fire({
                    icon: data.average_grade >= 3 ? 'success' : 'warning',
                    title: 'Vote Terminé',
                    html: `
                  <h3>Note moyenne: <strong>${data.average_grade.toFixed(2)}</strong></h3>
                  <h3>Statut: <strong>${data.average_grade >= 3 ? 'Retenu' : 'Non Retenu'}</strong></h3>
                `,
                    confirmButtonText: 'OK'
                  });
                }
              }
            })
            .catch(error => {
              console.error('Erreur lors de la récupération de l\'état de la proposition:', error);
            });
        }

        function refreshGallery(type) {
          fetch(`/images/proposition/${propositionId}?type=${type}`)
            .then(response => response.json())
            .then(data => {
              if (data.success) {
                const galleryContainer = document.querySelector(`.image-gallery[data-type="${type}"]`);
                if (galleryContainer) {
                  galleryContainer.innerHTML = data.images.length > 0 ?
                    data.images.map(image => `
                    <div class="image-wrapper" onclick="openModal('/images/${propositionId}/${type}/${image.filename}')">
                      <img src="/images/${propositionId}/${type}/${image.filename}" alt="Image ${type === 'before' ? 'Avant' : 'Après'}" class="image-thumbnail">
                    </div>
                  `).join('') :
                    `<p class="no-images-message">Aucune image "${type === 'before' ? 'Avant' : 'Après'}" disponible.</p>`;
                }
              } else {
                console.error('Erreur lors de la récupération des images:', data.message);
              }
            })
            .catch(error => {
              console.error('Erreur lors de la mise à jour de la galerie:', error);
            });
        }

        function handleFormSubmission(event) {
          event.preventDefault();
          const form = event.target;
          const formData = new FormData(form);

          fetch(form.action, {
              method: form.method,
              body: formData
            })
            .then(response => response.json())
            .then(data => {
              if (data.error) {
                Swal.fire({
                  icon: 'error',
                  title: 'Erreur',
                  text: data.error,
                });
              } else {
                Swal.fire({
                  icon: 'success',
                  title: 'Succès',
                  text: 'Votre évaluation a été soumise avec succès.',
                });
              }
            })
            .catch(error => {
              console.error('Erreur lors de l\'envoi de la note:', error);
              Swal.fire({
                icon: 'error',
                title: 'Erreur',
                text: 'Une erreur est survenue. Veuillez réessayer.',
              });
            });
        }

        // Initial calls
        checkPropositionStatus();
        const statusCheckInterval = setInterval(checkPropositionStatus, 3000);

        const gradeForm = document.getElementById('gradeForm');
        if (gradeForm) {
          gradeForm.addEventListener('submit', handleFormSubmission);
        }

        refreshGallery('before');
        refreshGallery('after');
      });
    </script>


===== ./views/layouts/main.ejs =====
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= title %></title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/dropzone/5.9.2/min/dropzone.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
  <link rel="icon" type="image/x-icon" href="/images/Logo-IMA-site-Web.ico">

  <% if (css && css.length > 0) { %>
  <% css.forEach(function(file) { %>
  <link rel="stylesheet" href="/css/<%= file %>">
  <% }); %>
  <% } %>
  <link rel="stylesheet" href="/css/navbar.css">
</head>

<body>
  <%- include('../partials/navbar') %>
  <div class="container">
    <%- include(view) %>
  </div>

  <% if ( typeof modules != 'undefined' && modules.length > 0) { %>
  <% modules.forEach(function(file) { %>
  <script type="module" src="/js/<%= file %>"></script>
  <% }); %>
  <% } %>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

  <% if (typeof js != 'undefined' && js.length > 0) { %>
  <% js.forEach(function(file) { %>
  <script src="/js/<%= file %>"></script>
  <% }); %>
  <% } %>

  <script src="/js/navbar.js"></script>
</body>

</html>


===== ./views/partials/flash.ejs =====
<% if (success_msg) { %>
<div class="alert alert-success">
  <%= success_msg %>
</div>
<% } %>

<% if (error_msg) { %>
<div class="alert alert-danger">
  <%= error_msg %>
</div>
<% } %>

<% if (error) { %>
<div class="alert alert-danger">
  <%= error %>
</div>
<% } %>

===== ./views/partials/navbar.ejs =====
<nav style="padding-top: 14px; padding-bottom: 16px; padding-left: 0px;" class="navbar">
  <div class="nav">
    <div class="navbar-header">
      <button class="navbar-toggler" data-toggle="open-navbar1">
        <span></span>
        <span></span>
        <span></span>
      </button>
      <div class="profile first">
        <div><%= username %></div>
        <img class="image" src="/images/profile-image/<%= userId %>" alt="Profile Image">
      </div>
      <a style="float: right;" href="/propositions/mes-propositions">
        <img src="/images/logo.jpg" alt="Logo">
      </a>
    </div>

    <div class="navbar-menu" id="open-navbar1">
      <ul style="margin-top: 5%;width: 100%;" class="navbar-nav">
        <%# UPDATED: Grant access to Admin OR Jury %>
        <% if (isAdmin) { %>
        <li><a style="color: #026e9f;font-size: 13px;font-family: sans-serif ;font-weight:bold ;" href="/charts/pie">GRAPHIQUES</a></li>
        <% } %>

        <li class="navbar-dropdown">
          <a style="color: #026e9f;font-size: 13px;font-family: sans-serif ;font-weight:bold" href="#" class="dropdown-toggler" data-dropdown="my-dropdown-id" aria-expanded="false">
           PROPOSITIONS  <i class="fa fa-angle-down"></i>
          </a>
          <ul class="dropdown" id="my-dropdown-id">
            <li><a style="color: #026e9f;font-size: 13px;font-family: sans-serif ;font-weight:bold" href="/propositions/mes-propositions">MES PROPOSITIONS</a></li>
            <li class="separator"></li>
            <li><a style="color: #026e9f;font-size: 13px;font-family: sans-serif ;font-weight:bold" href="/propositions/add">NOUVELLE PROPOSITION</a></li>
            <% if (isAdmin) { %>
            <li class="separator"></li>
            <li><a style="color: #026e9f;font-size: 13px;font-family: sans-serif ;font-weight:bold" href="/propositions">TOUTES LES PROPOSITIONS</a></li>
            <% } %>
          </ul>
        </li>

        <% if (isAdmin) { %>
        <li class="navbar-dropdown">
          <a style="color: #026e9f;font-size: 13px;font-family: sans-serif ;font-weight:bold" href="#" class="dropdown-toggler" data-dropdown="blog">
            UTILISATEURS<i class="fa fa-angle-down"></i>
          </a>
          <ul class="dropdown" id="blog">
            <li><a style="color: #026e9f;font-size: 13px;font-family: sans-serif ;font-weight:bold" href="/users">LISTE DES UTILISATEURS</a></li>
            <li class="separator"></li>
            <li><a style="color: #026e9f;font-size: 13px;font-family: sans-serif ;font-weight:bold" href="/users/add">AJOUTER UTILISATEUR</a></li>
            <li class="separator"></li>
            <li><a style="color: #026e9f;font-size: 13px;font-family: sans-serif ;font-weight:bold" href="/functions/">GERER FONCTIONS</a></li>
          </ul>
        </li>
        <% } %>

        <%# UPDATED: Grant access to Admin OR Jury %>
        <% if (isAdmin || isJury) { %>
        <li><a style="color: #026e9f;font-size: 13px;font-family: sans-serif ;font-weight:bold" href="/voting-sessions">SESSIONS DE VOTE</a></li>
        <% } %>
        <li><a style="color: #026e9f;font-size: 13px;font-family: sans-serif ;font-weight:bold" href="/voting-sessions/statut-vote">VOTE</a></li>
        <li><a style="color: #026e9f;font-size: 13px;font-family: sans-serif ;font-weight:bold" href="/auth/logout">DÉCONNEXION</a></li>
      </ul>
      <div style="margin-top: 5%;" class="profile second">
        <div><%= username %></div>
        <img class="image" src="/images/profile-image/<%= userId %>" alt="">
      </div>
    </div>
  </div>
</nav>

===== ./views/users/detailProposition.ejs =====
<div class="proposition-container">
  <header class="proposition-header">
    <h1 class="proposition-title"><%= proposition.objet %></h1>
    <div class="btns">
      <% if ((!proposition.locked && proposition.user_id == userId) || isAdmin) { %>
      <a href="/propositions/proposition/edit/<%= proposition.id %>" class="btn-edit">Modifier</a>
      <% } %>
      <% if (isAdmin) { %>
      <button class="btn-delete" onclick="confirmDelete(<%= proposition.id %>)">Supprimer</button>
      <% } %>
    </div>
  </header>

  <section class="proposition-info">
    <div class="info-item">
      <h2 class="info-subtitle">Description de la Situation Actuelle</h2>
      <p class="info-text"><%= proposition.description_situation_actuelle %></p>
    </div>
    <div class="info-item">
      <h2 class="info-subtitle">Description de l'Amélioration Proposée</h2>
      <p class="info-text"><%= proposition.description_amelioration_proposee %></p>
    </div>
  </section>

  <section class="proposition-status">
    <h2 class="status-title">Statut</h2>
    <div class="status <%= proposition.statut %>">
      <%= proposition.statut === 'soldee' ? 'Soldée' : proposition.statut === 'en cours' ? 'En Cours' : proposition.statut === 'annulee' ? 'Annulée' : 'Non Soldée' %>
    </div>
  </section>

  <section class="proposition-impacts">
    <h2 class="impacts-title">Impacts</h2>
    <ul>
      <% if (proposition.impact_economique) { %>
      <li class="impact-item">💡 Impact économique</li>
      <% } %>
      <% if (proposition.impact_technique) { %>
      <li class="impact-item">🔧 Impact technique</li>
      <% } %>
      <% if (proposition.impact_formation) { %>
      <li class="impact-item">📚 Impact de formation</li>
      <% } %>
      <% if (proposition.impact_fonctionnement) { %>
      <li class="impact-item">⚙️ Impact de fonctionnement</li>
      <% } %>
    </ul>
  </section>

  <section class="proposition-images">
    <h2 class="images-title">Images Avant
      <% if ((!proposition.locked && proposition.user_id == userId) || isAdmin) { %>
      <button class="btn-edit" onclick="openForm('before')">Gérer images</button>
      <% } %>
    </h2>
    <div class="image-gallery" data-type="before">
    </div>

    <h2 class="images-title">Images Après
      <% if (proposition.statut == 'soldee' && ((!proposition.locked && proposition.user_id == userId) || isAdmin)) { %><button class="btn-edit" onclick="openForm('after')">Gérer images</button><%}%>
    </h2>
    <% if (proposition.statut !== 'soldee') { %>
      <p class="no-images-message">Les images "Après" ne peuvent être ajoutées que si la proposition est "Soldée".</p>
      <% } else{ %>
      <div class="image-gallery" data-type="after">
      </div>
      <% } %>
  </section>

  <div id="popupFormBefore" class="popup-form">
    <div class="popup-content">
      <span class="popup-close" onclick="closeForm('before')">&times;</span>
      <h2>Télécharger les images 'Avant'</h2>
      <form action="/images/upload/<%= proposition.id %>?type=before" class="dropzone" id="beforeDropzone" enctype="multipart/form-data">
        <div class="add-wrapper">
          <img class="add-button" id="add1" src="/images/add-photo.jpg" alt="Dynamic Image" style="width: 100px">
        </div>
      </form>
    </div>
  </div>

  <div id="popupFormAfter" class="popup-form">
    <div class="popup-content">
      <span class="popup-close" onclick="closeForm('after')">&times;</span>
      <h2>Télécharger les images 'Après'</h2>
      <form action="/images/upload/<%= proposition.id %>?type=after" class="dropzone" id="afterDropzone" enctype="multipart/form-data">
        <div class="add-wrapper">
          <img class="add-button" id="add2" src="/images/add-photo.jpg" alt="Dynamic Image" style="width: 100px">
        </div>
      </form>
    </div>
  </div>

  <div id="imageModal" class="modal">
    <span class="modal-close" onclick="closeModal()">&times;</span>
    <img class="modal-content" id="modalImage">
    <a id="downloadLink" class="btn-download" download>Télécharger</a>
  </div>
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/dropzone/5.9.2/min/dropzone.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/compressorjs@1.1.1/dist/compressor.min.js"></script>

===== ./views/users/mespropositions.ejs =====
  <div class="content-container">
    <h1>Mes Propositions</h1>

    <div id="myGrid" class="ag-theme-alpine"></div>

    <div id="dataContainer" data-row-data='<%= JSON.stringify(propositions).replace(/[<>]/g, match => {const map = {  '<': '&lt;',  '>': '&gt;'}}); %>' style="display: none;"></div>

    <div id="myModal" class="modal">
      <div class="modal-content">
        <span class="close">&times;</span>
        <h2>Détails de la Proposition</h2>
        <div id="rowDetails"></div>
        <button class="button" id="viewDetailsButton">Voir les détails</button>
      </div>
    </div>
  </div>
  <script src="/localization/fr-FR.js"></script>

===== ./views/users/modifierProposition.ejs =====
<form id="upload-form" method="post" action="/propositions/update/<%= proposition.id %>">
  <h1>Modifier Proposition<span>: <%= proposition.display_id %></span> </h1>

  <label for="object">Objet :</label>
  <div class="input-container">
    <input type="text" id="object" maxlength="100" name="objet" value="<%= proposition.objet %>" placeholder="Entrez les détails de l'objet" required>
    <span class="counter" id="charCounter1">0 / 100</span>
  </div>

  <label for="description1">Description de la situation actuelle :</label>
  <div class="input-container textarea-container">
    <textarea id="description1" maxlength="800" name="description_situation_actuelle" placeholder="Entrez la description ici" required><%= proposition.description_situation_actuelle %></textarea>
    <span class="counter" id="charCounter2">0 / 800</span>
  </div>

  <label for="description2">Description de l'amélioration proposée :</label>
  <div class="input-container textarea-container">
    <textarea id="description2" maxlength="800" name="description_amelioration_proposee" placeholder="Entrez la description ici" required><%= proposition.description_amelioration_proposee %></textarea>
    <span class="counter" id="charCounter3">0 / 800</span>
  </div>

  <label>Impact :</label>
  <div class="checkbox-group">
    <div class="checkbox-column">
      <label><input type="checkbox" name="impact_economique" value="1" <%= proposition.impact_economique==1 ? 'checked' : '' %>> Économique</label>
      <label><input type="checkbox" name="impact_technique" value="1" <%= proposition.impact_technique ==1 ? 'checked' : '' %>> Technique</label>
    </div>
    <div class="checkbox-column">
      <label><input type="checkbox" name="impact_formation" value="1" <%= proposition.impact_formation ==1 ? 'checked' : '' %>> Formation</label>
      <label><input type="checkbox" name="impact_fonctionnement" value="1" <%= proposition.impact_fonctionnement==1 ? 'checked' : '' %>> Fonctionnement</label>
    </div>
  </div>

  <label>Statut :</label>
  <div class="mydict">
    <div>
      <label>
        <input type="radio" name="statut" value="non soldee" <%= proposition.statut === 'non soldee' ? 'checked' : '' %>>
        <span>Non Soldée</span>
      </label>
      <label>
        <input type="radio" name="statut" value="en cours" <%= proposition.statut === 'en cours' ? 'checked' : '' %>>
        <span>En Cours</span>
      </label>
      <% if(isAdmin) { %>
      <label>
        <input type="radio" name="statut" value="soldee" <%= proposition.statut === 'soldee' ? 'checked' : '' %>>
        <span>Soldée</span>
      </label>
      <label>
        <input type="radio" name="statut" value="annulee" <%= proposition.statut === 'annulee' ? 'checked' : '' %>>
        <span>Annulée</span>
      </label>
      <% }%>
    </div>
  </div>
  <button type="submit">Soumettre</button>
</form>

<div id="error-message" style="color: red;"></div>

===== ./views/users/propositionForm.ejs =====
<style>
  body{
    height: 110vh;
  }
  #description1::placeholder {
    color: #888; /* Gris doux */
    font-size: 16px;
font-family: open-sans;
}
#description2::placeholder {
    color: #888; /* Gris doux */
    font-size: 16px;
    font-family: open-sans;

}
</style>
<form id="upload-form" method="post">
  <h1>
    <% if (targetUsername) { %>
    Ajouter une proposition pour <strong><%= targetUsername %></strong>
    <% } else { %>
    Soumettre une Proposition
    <% } %>
  </h1>

  <div class="input-container">
    <label for="object">Objet :</label>
    <input type="text" id="object" name="objet" maxlength="100" placeholder="Entrez les détails de l'objet" required>
    <span class="counter" id="charCounter1">0 / 100</span>
  </div>

  <div class="input-container textarea-container">
    <label for="description1">Description de la situation actuelle :</label>
    <textarea id="description1" name="description_situation_actuelle" maxlength="1000" placeholder="Entrez la description ici" required></textarea>
    <span class="counter" id="charCounter2">0 / 800</span>
  </div>

  <div class="input-container textarea-container">
    <label for="description2">Description de l'amélioration proposée :</label>
    <textarea id="description2" name="description_amelioration_proposee" maxlength="1000" placeholder="Entrez la description ici" required></textarea>
    <span class="counter" id="charCounter3">0 / 800</span>
  </div>

  <label>Impact :</label>
  <div class="checkbox-group">
    <div class="checkbox-column">
      <label><input type="checkbox" name="impact_economique" value="1"> Économique</label>
      <label><input type="checkbox" name="impact_technique" value="1"> Technique</label>
    </div>
    <div class="checkbox-column">
      <label><input type="checkbox" name="impact_formation" value="1"> Formation</label>
      <label><input type="checkbox" name="impact_fonctionnement" value="1"> Fonctionnement</label>
    </div>
  </div>

  <label>Statut :</label>
  <div class="mydict">
    <div>
      <label>
        <input type="radio" name="statut" value="non soldee" checked>
        <span>Non Soldée</span>
      </label>
      <label>
        <input type="radio" name="statut" value="en cours">
        <span>En Cours</span>
      </label>
      <label>
        <input type="radio" name="statut" value="soldee">
        <span>Soldée</span>
      </label>
    </div>
  </div>

  <input type="hidden" name="target_user_id" value="<%= targetUserId %>" />
  <button type="submit">Soumettre</button>
</form>

<div id="error-message" style="color: red;"></div>


===== ./views/voting-sessions/details.ejs =====
  <div class="content-container">
    <h1>Détails de la Session</h1>

    <div class="session-info">
      <p><strong>ID de la session :</strong> <%= session.id %></p>
      <p><strong>Type de session :</strong> <%= session.type %></p>
      <p><strong>Statut :</strong> <%= session.ended ? "Terminée" : (session.started ? "En cours" : "Non démarrée") %></p>
      <p><strong>Date de début :</strong> <%= session.start_time ? new Date(session.start_time).toLocaleString('fr-FR') : '---' %></p>
      <p><strong>Date de fin :</strong> <%= session.end_time ? new Date(session.end_time).toLocaleString('fr-FR') : '---' %></p>
    </div>
    <div class="btncontainer">
      <% if (isAdmin && session.type == 'global' && session.ended) { %>
        <a href="/voting-sessions/<%= sessionId %>/resultats-votes-global" class="button btn-primary">Voir les Résultats</a>
      <% } %>

      <% if (isAdmin && !session.started) { %>
        <button class="button btn-primary" id="startSessionButton">Demarrer session</button>
      <% } %>

      <% if (isAdmin && session.started && !session.ended) { %>
        <button class="button btn-primary" id="endSessionButton">Terminer session</button>
      <% } %>

      <% if (isAdmin) { %>
        <button class="button danger-btn" id="deleteSessionButton">Annuler Session</button>
      <% } %>
    </div>

    <div id="myGrid" class="ag-theme-alpine"></div>

    <div id="dataContainer" data-row-data='<%= JSON.stringify(propositions).replace(/[<>]/g, match => ({ "<": "<", ">": ">" }[match])) %>' style="display: none;"></div>
  </div>

  <script src="/localization/fr-FR.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', async () => {
      let gridOptions;
      
      const dataContainer = document.getElementById('dataContainer');
      const rowData = JSON.parse(dataContainer.getAttribute('data-row-data'));

      const startSessionButton = document.getElementById('startSessionButton');
      const endSessionButton = document.getElementById('endSessionButton');
      const deleteSessionButton = document.getElementById('deleteSessionButton');
      const sessionId = '<%= session.id %>';

      if (startSessionButton) {
        startSessionButton.addEventListener('click', () => {
          Swal.fire({
            title: 'Êtes-vous sûr?',
            text: "Cela va démarrer la session de vote.",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#004d99',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Oui, démarrez-la!'
          }).then((result) => {
            if (result.isConfirmed) {
              fetch(`/voting-sessions/${sessionId}/start`, { method: 'POST' })
                .then(response => response.json())
                .then(result => {
                  if(result.success) {
                    Swal.fire('Succès', 'Session démarrée avec succès!', 'success').then(() => location.reload());
                  } else {
                     Swal.fire('Erreur', result.message || 'Échec de démarrer la session.', 'error');
                  }
                })
                .catch(() => Swal.fire('Erreur', 'Échec de démarrer la session.', 'error'));
            }
          });
        });
      }

      if (endSessionButton) {
        endSessionButton.addEventListener('click', () => {
          Swal.fire({
            title: 'Êtes-vous sûr?',
            text: "Cela va terminer la session de vote.",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#004d99',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Oui, terminez-la!'
          }).then((result) => {
            if (result.isConfirmed) {
              fetch(`/voting-sessions/${sessionId}/end`, { method: 'POST' })
                .then(response => response.json())
                .then(result => {
                   Swal.fire('Succès', 'Session terminée avec succès!', 'success').then(() => location.reload());
                })
                .catch(() => Swal.fire('Erreur', 'Échec de terminer la session.', 'error'));
            }
          });
        });
      }

      if (deleteSessionButton) {
        deleteSessionButton.addEventListener('click', () => {
          Swal.fire({
            title: 'Êtes-vous sûr?',
            text: "Cela va annuler et supprimer la session de vote.",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Oui, supprimez-la!'
          }).then((result) => {
            if (result.isConfirmed) {
              fetch(`/voting-sessions/${sessionId}`, { method: 'DELETE' })
                .then(response => response.json())
                .then(result => {
                  if (!result.error) {
                    Swal.fire('Supprimé!', 'La session a été supprimée.', 'success').then(() => {
                        window.location.href = '/voting-sessions';
                    });
                  } else {
                    Swal.fire('Erreur', result.message || 'Échec de la suppression.', 'error');
                  }
                })
                .catch(() => Swal.fire('Erreur', 'Échec de la suppression de la session.', 'error'));
            }
          });
        });
      }

      // Define the column definitions with the new changes
      const columnDefs = [
        { headerName: "ID", field: "display_id", sortable: true, filter: true, resizable: true, flex: 0.8, sort: 'asc', minWidth: 70 },
        { headerName: "Nom", field: "full_name", sortable: true, filter: true, resizable: true, flex: 1.5, minWidth: 120 },
        { headerName: "Objet", field: "objet", sortable: true, filter: true, resizable: true, flex: 2, minWidth: 150 },
        { 
          headerName: "Succès (%)", 
          field: "average_grade", 
          sortable: true, 
          filter: true, 
          resizable: true, 
          flex: 1,
          valueFormatter: params => {
            if (params.value === null || typeof params.value === 'undefined') return '---';
            const percentage = (parseFloat(params.value) / 6) * 100;
            return percentage.toFixed(0) + '%';
          },
          minWidth: 100 
        },
        {
          headerName: "Statut",
          field: "average_grade",
          sortable: false,
          filter: false,
          resizable: true,
          flex: 1,
          minWidth: 110,
          cellRenderer: params => {
             if (params.value === null || typeof params.value === 'undefined') return 'En attente';
             const isRetained = parseFloat(params.value) > 3; // Threshold: > 50% (3/6)
             const text = isRetained ? 'Retenu' : 'Non Retenu';
             const color = isRetained ? '#28a745' : '#dc3545';
             return `<span style="color: ${color}; font-weight: bold;">${text}</span>`;
          }
        },
        { 
          headerName: "Détails", 
          flex: 1,
          minWidth: 120,
          cellRenderer: (params) => {
            const button = document.createElement('button');
            button.classList.add('button', 'details-button');
            button.innerText = 'Détails';
            button.addEventListener('click', () => window.location.href = `/propositions/proposition/${params.data.id}`);
            return button;
          }
        },
      ];

      gridOptions = {
        columnDefs: columnDefs,
        rowData: rowData,
        pagination: true,
        paginationPageSize: 20,
        domLayout: 'autoHeight',
        suppressRowClickSelection: true,
        localeText: AG_GRID_LOCALE_FR,
      };

      const gridDiv = document.getElementById('myGrid');
      new agGrid.Grid(gridDiv, gridOptions);
    })
  </script>

===== ./views/voting-sessions/global-vote-results.ejs =====
<div class="content-container">
  <h1>Détails de la Session</h1>

  <div class="session-info">
    <p><strong>ID de la session :</strong> <%= session.id %></p>
    <p><strong>Type de session :</strong> <%= session.type == 'global' ? 'Globale' : 'Jury' %></p>
    <p><strong>Statut :</strong> <%= session.is_active ? "Active" : "Inactive" %></p>
    <p><strong>Date de début :</strong> <%= session.start_time ? new Date(session.start_time).toLocaleString('fr-FR') : 'Non démarrée' %></p>
    <p><strong>Date de fin :</strong> <%= session.end_time ? new Date(session.end_time).toLocaleString('fr-FR') : 'Non terminée' %></p>
  </div>

  <h2>Impact Économique</h2>
  <% if (economicImpactPropositions.length > 0) { %>
    <table>
      <thead>
        <tr>
          <th>Proposition ID</th>
          <th>Nom Complet</th>
          <th>Note Moyenne</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody>
        <% economicImpactPropositions.forEach(function(prop) { %>
          <tr>
            <td><%= prop.display_id %></td>
            <td><%= prop.full_name %></td>
            <td><%= prop.average_grade %></td>
            <td>
              <a href="/propositions/proposition/<%= prop.proposition_id %>" class="btn-details">Détails</a>
            </td>
          </tr>
        <% }); %>
      </tbody>
    </table>
    <p class="total-points">
      <strong>Total Points:</strong> 
      <%= economicImpactPropositions.reduce((sum, prop) => sum + parseFloat(prop.average_grade), 0) %>
    </p>
  <% } else { %>
    <p class="no-propositions-message">Aucune proposition disponible pour l'impact économique.</p>
  <% } %>

  <h2>Impact Technique</h2>
  <% if (technicalImpactPropositions.length > 0) { %>
    <table>
      <thead>
        <tr>
          <th>Proposition ID</th>
          <th>Nom Complet</th>
          <th>Note Moyenne</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody>
        <% technicalImpactPropositions.forEach(function(prop) { %>
          <tr>
            <td><%= prop.display_id %></td>
            <td><%= prop.full_name %></td>
            <td><%= prop.average_grade %></td>
            <td>
              <a href="/propositions/proposition/<%= prop.proposition_id %>" class="btn-details">Détails</a>
            </td>
          </tr>
        <% }); %>
      </tbody>
    </table>
    <p class="total-points">
      <strong>Total Points:</strong> 
      <%= technicalImpactPropositions.reduce((sum, prop) => sum + parseFloat(prop.average_grade), 0) %>
    </p>
  <% } else { %>
    <p class="no-propositions-message">Aucune proposition disponible pour l'impact technique.</p>
  <% } %>

  <h2>Impact Formation</h2>
  <% if (trainingImpactPropositions.length > 0) { %>
    <table>
      <thead>
        <tr>
          <th>Proposition ID</th>
          <th>Nom Complet</th>
          <th>Note Moyenne</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody>
        <% trainingImpactPropositions.forEach(function(prop) { %>
          <tr>
            <td><%= prop.display_id %></td>
            <td><%= prop.full_name %></td>
            <td><%= prop.average_grade %></td>
            <td>
              <a href="/propositions/proposition/<%= prop.proposition_id %>" class="btn-details">Détails</a>
            </td>
          </tr>
        <% }); %>
      </tbody>
    </table>
    <p class="total-points">
      <strong>Total Points:</strong> 
      <%= trainingImpactPropositions.reduce((sum, prop) => sum + parseFloat(prop.average_grade), 0) %>
    </p>
  <% } else { %>
    <p class="no-propositions-message">Aucune proposition disponible pour l'impact formation.</p>
  <% } %>

  <h2>Impact Fonctionnement</h2>
  <% if (operationalImpactPropositions.length > 0) { %>
    <table>
      <thead>
        <tr>
          <th>Proposition ID</th>
          <th>Nom Complet</th>
          <th>Note Moyenne</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody>
        <% operationalImpactPropositions.forEach(function(prop) { %>
          <tr>
            <td><%= prop.display_id %></td>
            <td><%= prop.full_name %></td>
            <td><%= prop.average_grade %></td>
            <td>
              <a href="/propositions/proposition/<%= prop.proposition_id %>" class="btn-details">Détails</a>
            </td>
          </tr>
        <% }); %>
      </tbody>
    </table>
    <p class="total-points">
      <strong>Total Points:</strong> 
      <%= operationalImpactPropositions.reduce((sum, prop) => sum + parseFloat(prop.average_grade), 0) %>
    </p>
  <% } else { %>
    <p class="no-propositions-message">Aucune proposition disponible pour l'impact fonctionnement.</p>
  <% } %>
</div>

===== ./views/voting-sessions/global-vote.ejs =====
<div class="proposition-container">
  <header class="proposition-header">
    <h1 class="proposition-title" id="proposition-objet"></h1>
  </header>

  <section class="proposition-info">
    <div class="info-item">
      <h2 class="info-subtitle">Description de la Situation Actuelle</h2>
      <p class="info-text" id="proposition-description-situation"></p>
    </div>
    <div class="info-item">
      <h2 class="info-subtitle">Description de l'Amélioration Proposée</h2>
      <p class="info-text" id="proposition-description-amelioration"></p>
    </div>
  </section>

  <section class="proposition-status">
    <h2 class="status-title">Statut</h2>
    <div class="status" id="proposition-status"></div>
  </section>

  <section class="proposition-impacts">
    <h2 class="impacts-title">Impacts</h2>
    <ul id="proposition-impacts"></ul>
  </section>

  <section class="proposition-images">
    <h2 class="images-title">Images Avant</h2>
    <div class="image-gallery" data-type="before" id="before-images"></div>

    <h2 class="images-title">Images Après</h2>
    <div class="image-gallery" data-type="after" id="after-images"></div>
  </section>

  <div class="grading-section">
    <h2>Évaluez cette proposition</h2>
    <form id="gradeForm" class="grade-form">
      <div class="radio-group">
        <% for (let i = 1; i <= 6; i++) { %>
        <label class="grade-label">
          <input type="radio" class="grade" name="grade" value="<%= i %>">
          <span class="custom-radio"><%= i %></span>
        </label>
        <% } %>
      </div>
    </form>
  </div>

  <div class="navigation-buttons">
    <button class="nav-button" id="prev-btn">Précédent</button>
    <span class="pagination" id="pagination">0/0</span>
    <button class="nav-button" id="next-btn">Suivant</button>
  </div>
  <div class="extra">
    <button class="submit-button" id="submit-vote-btn">Soumettre tous les votes</button>
  </div>

  <input type="hidden" id="propositions-data" value="<%= JSON.stringify(propositions) %>">
</div>

<div id="imageModal" class="modal">
  <span class="modal-close" onclick="closeModal()">&times;</span>
  <img class="modal-content" id="modalImage">
  <a id="downloadLink" class="btn-download" download>Télécharger</a>
</div>

===== ./views/voting-sessions/list.ejs =====
<div class="content-container">
  <h1>Sessions de Vote</h1>

  <% if (isAdmin) { %>
    <div class="session-actions">
      <button class="button primary" onclick="createSession('jury')">Créer Session Jury</button>
      <button class="button primary" onclick="createSession('global')">Créer Session Globale</button>
    </div>
  <% } %>

  <div id="myGrid" class="ag-theme-alpine"></div>

  <div id="dataContainer"
    data-row-data='<%- JSON.stringify(sessions) %>'
    style="display: none;"></div>
</div>

<script src="/localization/fr-FR.js"></script>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const dataContainer = document.getElementById('dataContainer');
    const rowData = JSON.parse(dataContainer.getAttribute('data-row-data'));

    const statusCellRenderer = (params) => {
      const session = params.data;
      if (session.ended) {
        return '<span style="color: grey; font-weight: bold;">Terminée</span>';
      }
      if (session.started) {
        return '<span style="color: green; font-weight: bold;">En cours</span>';
      }
      return '<span style="color: orange; font-weight: bold;">Non démarrée</span>';
    };

    const columnDefs = [{
        headerName: "ID",
        field: "id",
        sortable: true, filter: true, resizable: true, flex: 0.5, sort: 'desc'
      },
      {
        headerName: "Type",
        field: "type",
        sortable: true, filter: true, resizable: true, flex: 1
      },
      {
        headerName: "Statut",
        cellRenderer: statusCellRenderer,
        sortable: true, filter: true, resizable: true, flex: 1
      },
      {
        headerName: "Début",
        field: "init_time",
        sortable: true,
        valueFormatter: params => params.value ? new Date(params.value).toLocaleString('fr-FR') : '---',
        flex: 1.5
      },
      {
        headerName: "Fin",
        field: "end_time",
        sortable: true,
        valueFormatter: params => params.value ? new Date(params.value).toLocaleString('fr-FR') : '---',
        flex: 1.5
      },
      {
        headerName: "Actions",
        sortable: false, filter: false, flex: 1,
        cellRenderer: (params) => {
          const button = document.createElement('a');
          button.innerText = 'Détails';
          button.className = 'button secondary';
          button.href = `/voting-sessions/${params.data.id}`;
          return button;
        }
      }
    ];

    const gridOptions = {
      columnDefs: columnDefs,
      rowData: rowData,
      defaultColDef: {
        sortable: true,
        filter: true,
        resizable: true,
      },
      localeText: AG_GRID_LOCALE_FR,
      pagination: true,
      paginationPageSize: 20,
      domLayout: 'autoHeight',
      suppressRowClickSelection: true,
    };

    const eGridDiv = document.querySelector('#myGrid');
    agGrid.createGrid(eGridDiv, gridOptions);
  });

  function createSession(type) {
    Swal.fire({
      title: `Créer une nouvelle session ${type}?`,
      text: "Les propositions éligibles seront verrouillées pour le vote.",
      icon: 'question',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Oui, créer!',
      cancelButtonText: 'Annuler'
    }).then((result) => {
      if (result.isConfirmed) {
        fetch('/voting-sessions/init', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ type: type })
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            Swal.fire({
              title: 'Succès!',
              text: `Session créée. Redirection vers la page de détails...`,
              icon: 'success',
              timer: 2000,
              showConfirmButton: false,
            }).then(() => {
              window.location.href = `/voting-sessions/${data.sessionId}`;
            });
          } else {
            Swal.fire('Erreur', data.message || 'Impossible de créer la session.', 'error');
          }
        })
        .catch(error => {
          console.error('Fetch Error:', error);
          Swal.fire('Erreur', 'Une erreur de communication est survenue.', 'error');
        });
      }
    });
  }
</script>


===== ./views/voting-sessions/status.ejs =====
<p> Chargement... </p>

